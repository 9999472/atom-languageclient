Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileChangeType = exports.MessageType = exports.SymbolKind = exports.DocumentHighlightKind = exports.CompletionItemKind = exports.TextDocumentSyncKind = exports.DiagnosticSeverity = exports.LanguageClientV1 = undefined;

var _vscodeJsonrpc = require('vscode-jsonrpc');

var rpc = _interopRequireWildcard(_vscodeJsonrpc);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

// Flow-typed wrapper around JSONRPC to implement Microsoft Language Server Protocol v1
// https://github.com/Microsoft/language-server-protocol/blob/master/versions/protocol-1-x.md
let LanguageClientV1 = exports.LanguageClientV1 = class LanguageClientV1 {

  constructor(connection) {
    this._con = connection;

    connection.onError(error => this._log('onError', error));
    connection.onClose(() => this._log('onClose'));
    connection.onDispose(() => this._log('onDispose'));
    connection.onUnhandledNotification(notification => this._log('onUnhandledNotification', notification));
    connection.onNotification(() => this._log('onNotification', arguments));

    connection.listen();
  }

  _log() {
    console.log.apply(console, Array.prototype.slice.call(arguments));
  }

  initialize(params) {
    var _this = this;

    return _asyncToGenerator(function* () {
      return _this._sendRequest('initialize', params);
    })();
  }

  shutdown() {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      return _this2._sendRequest('shutdown');
    })();
  }

  onExit(callback) {
    this._onNotification({ method: 'exit' }, callback);
  }

  onShowMessage(callback) {
    this._onNotification({ method: 'window/showMessage' }, callback);
  }

  onLogMessage(callback) {
    this._onNotification({ method: 'window/logMessage' }, callback);
  }

  didChangeConfiguration(params) {
    this._sendNotification('workspace/didChangeConfiguration', params);
  }

  didOpenTextDocument(params) {
    this._sendNotification('textDocument/didOpen', params);
  }

  didChangeTextDocument(params) {
    this._sendNotification('textDocument/didChange', params);
  }

  didCloseTextDocument(params) {
    this._sendNotification('textDocument/didClose', params);
  }

  didChangeWatchedFiles(params) {
    this._sendNotification('workspace/didChangeWatchedFiles', params);
  }

  onPublishDiagnostics(callback) {
    this._onNotification({ method: 'textDocument/publishDiagnostics' }, callback);
  }

  completion(params) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      return _this3._sendRequest('textDocument/completion', params);
    })();
  }

  completionItemResolve(params) {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      return _this4._sendRequest('completionItem/resolve', params);
    })();
  }

  hover(params) {
    var _this5 = this;

    return _asyncToGenerator(function* () {
      return _this5._sendRequest('textDocument/hover', params);
    })();
  }

  signatureHelp(params) {
    var _this6 = this;

    return _asyncToGenerator(function* () {
      return _this6._sendRequest('textDocument/signatureHelp', params);
    })();
  }

  gotoDefinition(params) {
    var _this7 = this;

    return _asyncToGenerator(function* () {
      return _this7._sendRequest('textDocument/definition', params);
    })();
  }

  findReferences(params) {
    var _this8 = this;

    return _asyncToGenerator(function* () {
      return _this8._sendRequest('textDocument/references', params);
    })();
  }

  documentHighlight(params) {
    var _this9 = this;

    return _asyncToGenerator(function* () {
      return _this9._sendRequest('textDocument/documentHighlight', params);
    })();
  }

  documentSymbol(params) {
    var _this10 = this;

    return _asyncToGenerator(function* () {
      return _this10._sendRequest('textDocument/documentSymbol', params);
    })();
  }

  workspaceSymbol(params) {
    var _this11 = this;

    return _asyncToGenerator(function* () {
      return _this11._sendRequest('workspace/symbol', params);
    })();
  }

  codeAction(params) {
    var _this12 = this;

    return _asyncToGenerator(function* () {
      return _this12._sendRequest('textDocument/codeAction', params);
    })();
  }

  codeLens(params) {
    var _this13 = this;

    return _asyncToGenerator(function* () {
      return _this13._sendRequest('textDocument/codeLens', params);
    })();
  }

  codeLensResolve(params) {
    var _this14 = this;

    return _asyncToGenerator(function* () {
      return _this14._sendRequest('codeLens/resolve', params);
    })();
  }

  documentLink(params) {
    var _this15 = this;

    return _asyncToGenerator(function* () {
      return _this15._sendRequest('textDocument/documentLink', params);
    })();
  }

  documentLinkResolve(params) {
    var _this16 = this;

    return _asyncToGenerator(function* () {
      return _this16._sendRequest('documentLink/resolve', params);
    })();
  }

  documentFormatting(params) {
    var _this17 = this;

    return _asyncToGenerator(function* () {
      return _this17._sendRequest('textDocument/formatting', params);
    })();
  }

  documentRangeFormatting(params) {
    var _this18 = this;

    return _asyncToGenerator(function* () {
      return _this18._sendRequest('textDocument/rangeFormatting', params);
    })();
  }

  documentOnTypeFormatting(params) {
    var _this19 = this;

    return _asyncToGenerator(function* () {
      return _this19._sendRequest('textDocument/onTypeFormatting', params);
    })();
  }

  rename(params) {
    var _this20 = this;

    return _asyncToGenerator(function* () {
      return _this20._sendRequest('textDocument/rename', params);
    })();
  }

  _onNotification(type, callback) {
    this._con.onNotification(type, value => {
      this._log(`onNotification ${type.method}`, value);
      callback(value);
    });
  }

  _sendNotification(method, args) {
    this._log(`sendNotification ${method}`, args);
    this._con.sendNotification(method, args);
  }

  _sendRequest(method, args) {
    var _this21 = this;

    return _asyncToGenerator(function* () {
      _this21._log(`sendRequest ${method} sending`, args);
      try {
        const result = yield _this21._con.sendRequest(method, args);
        _this21._log(`sendRequest ${method} received`, result);
        return result;
      } catch (e) {
        _this21._log(`sendRequest ${method} threw`, e);
        throw e;
      }
    })();
  }
};

// Structures

const DiagnosticSeverity = exports.DiagnosticSeverity = {
  // Reports an error.
  Error: 1,
  // Reports a warning.
  Warning: 2,
  // Reports an information.
  Information: 3,
  // Reports a hint.
  Hint: 4
};

// General

// Defines how the host (editor) should sync document changes to the language server.
const TextDocumentSyncKind = exports.TextDocumentSyncKind = {
  //  Documents should not be synced at all.
  None: 0,
  //  Documents are synced by always sending the full content of the document.
  Full: 1,
  //  Documents are synced by sending the full content on open. After that only incremental
  //  updates to the document are sent.
  Incremental: 2
};

// Completion options.


// Signature help options.


// Code Lens options.


// Format document on type options


// Document

// The kind of a completion entry.
const CompletionItemKind = exports.CompletionItemKind = {
  Text: 1,
  Method: 2,
  Function: 3,
  Constructor: 4,
  Field: 5,
  Variable: 6,
  Class: 7,
  Interface: 8,
  Module: 9,
  Property: 10,
  Unit: 11,
  Value: 12,
  Enum: 13,
  Keyword: 14,
  Snippet: 15,
  Color: 16,
  File: 17,
  Reference: 18
};

// The result of a hover request.


/**
 * The marked string is rendered:
 * - as markdown if it is represented as a string
 * - as code block of the given langauge if it is represented as a pair of a language and a value
 *
 * The pair of a language and a value is an equivalent to markdown:
 * ```${language};
 * ${value};
 * ```
 */


/**
 * Signature help represents the signature of something
 * callable. There can be multiple signature but only one
 * active and only one active parameter.
 */


/**
 * Represents the signature of something callable. A signature
 * can have a label, like a function-name, a doc-comment, and
 * a set of parameters.
 */


/**
 * Represents a parameter of a callable-signature. A parameter can
 * have a label and a doc-comment.
 */


/**
 * A document highlight is a range inside a text document which deserves
 * special attention. Usually a document highlight is visualized by changing
 * the background color of its range.
 *
 */
const DocumentHighlightKind = exports.DocumentHighlightKind = {
  // A textual occurrance.
  Text: 1,
  // Read-access of a symbol, like reading a variable.
  Read: 2,
  // Write-access of a symbol, like writing to a variable.
  Write: 3
};

/**
 * Represents information about programming constructs like variables, classes,
 * interfaces etc.
 */
const SymbolKind = exports.SymbolKind = {
  File: 1,
  Module: 2,
  Namespace: 3,
  Package: 4,
  Class: 5,
  Method: 6,
  Property: 7,
  Field: 8,
  Constructor: 9,
  Enum: 10,
  Interface: 11,
  Function: 12,
  Variable: 13,
  Constant: 14,
  String: 15,
  Number: 16,
  Boolean: 17,
  Array: 18
};

// The parameters of a Workspace Symbol Request.


// Params for the CodeActionRequest


// Contains additional diagnostic information about the context in which a code action is run.


/**
 * A code lens represents a command that should be shown along with
 * source text, like the number of references, a way to run tests, etc.
 *
 * A code lens is _unresolved_ when no command is associated to it. For performance
 * reasons the creation of a code lens and resolving should be done in two stages.
 */


/**
 * A document link is a range in a text document that links to an internal or
* external resource, like another
 * text document or a web site.
 */


// Value-object describing what options formatting should use.


// Window

const MessageType = exports.MessageType = {
  // An error message.
  Error: 1,
  // A warning message.
  Warning: 2,
  // An information message.
  Info: 3,
  // A log message.
  Log: 4
};

// Workspace

// An event describing a change to a text document. If range and rangeLength are omitted
// the new text is considered to be the full content of the document.


// The file event type.
const FileChangeType = exports.FileChangeType = {
  // The file got created.
  Created: 1,
  // The file got changed.
  Changed: 2,
  // The file got deleted.
  Deleted: 3
};

// An event describing a file change.
//# sourceMappingURL=data:application/json;base64,