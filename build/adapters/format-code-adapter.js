Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _languageclient = require('../languageclient');

var _convert = require('../convert');

var _convert2 = _interopRequireDefault(_convert);

var _atom = require('atom');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

let FormatCodeAdapter = class FormatCodeAdapter {

  constructor(languageClient, canFormatSelection, canFormatFile, grammarScopes) {
    this._disposable = new _atom.CompositeDisposable();
    this._lc = languageClient;
    const scopedTextEditors = grammarScopes.map(g => `atom-text-editor[data-grammar="${g.replace(/\./g, ' ')}"]`).join(', ');
    if (canFormatSelection) {
      this._disposable.add(atom.commands.add(scopedTextEditors, { 'language:format-selection': this.formatSelection.bind(this) }));
    };
    if (canFormatFile) {
      this._disposable.add(atom.commands.add(scopedTextEditors, { 'language:format-file': this.formatDocument.bind(this) }));
    };
  }

  dispose() {
    this._disposable.dispose();
  }

  formatDocument() {
    var _this = this;

    return _asyncToGenerator(function* () {
      const editor = atom.workspace.getActiveTextEditor();
      if (editor == null) return;

      const result = yield _this._lc.documentFormatting({
        textDocument: _convert2.default.editorToTextDocumentIdentifier(editor),
        options: FormatCodeAdapter.getFormatOptions(editor)
      });

      editor.getBuffer().transact(function () {
        return FormatCodeAdapter.applyTextEdits(editor, result.reverse());
      });
    })();
  }

  formatSelection() {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      const editor = atom.workspace.getActiveTextEditor();
      if (editor == null) return;

      const result = yield _this2._lc.documentRangeFormatting({
        textDocument: _convert2.default.editorToTextDocumentIdentifier(editor),
        range: _convert2.default.atomRangeToLSRange(editor.getSelectedBufferRange()),
        options: FormatCodeAdapter.getFormatOptions(editor)
      });

      editor.getBuffer().transact(function () {
        return FormatCodeAdapter.applyTextEdits(editor, result.reverse());
      });
    })();
  }

  static applyTextEdits(editor, textEdits) {
    for (let textEdit of textEdits) {
      const atomRange = _convert2.default.lsRangeToAtomRange(textEdit.range);
      editor.setTextInBufferRange(atomRange, textEdit.newText);
    }
  }

  static getFormatOptions(editor) {
    return {
      tabSize: editor.getTabLength(),
      insertSpaces: editor.getSoftTabs()
    };
  }
};
exports.default = FormatCodeAdapter;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9hZGFwdGVycy9mb3JtYXQtY29kZS1hZGFwdGVyLmpzIl0sIm5hbWVzIjpbIkZvcm1hdENvZGVBZGFwdGVyIiwiY29uc3RydWN0b3IiLCJsYW5ndWFnZUNsaWVudCIsImNhbkZvcm1hdFNlbGVjdGlvbiIsImNhbkZvcm1hdEZpbGUiLCJncmFtbWFyU2NvcGVzIiwiX2Rpc3Bvc2FibGUiLCJfbGMiLCJzY29wZWRUZXh0RWRpdG9ycyIsIm1hcCIsImciLCJyZXBsYWNlIiwiam9pbiIsImFkZCIsImF0b20iLCJjb21tYW5kcyIsImZvcm1hdFNlbGVjdGlvbiIsImJpbmQiLCJmb3JtYXREb2N1bWVudCIsImRpc3Bvc2UiLCJlZGl0b3IiLCJ3b3Jrc3BhY2UiLCJnZXRBY3RpdmVUZXh0RWRpdG9yIiwicmVzdWx0IiwiZG9jdW1lbnRGb3JtYXR0aW5nIiwidGV4dERvY3VtZW50IiwiZWRpdG9yVG9UZXh0RG9jdW1lbnRJZGVudGlmaWVyIiwib3B0aW9ucyIsImdldEZvcm1hdE9wdGlvbnMiLCJnZXRCdWZmZXIiLCJ0cmFuc2FjdCIsImFwcGx5VGV4dEVkaXRzIiwicmV2ZXJzZSIsImRvY3VtZW50UmFuZ2VGb3JtYXR0aW5nIiwicmFuZ2UiLCJhdG9tUmFuZ2VUb0xTUmFuZ2UiLCJnZXRTZWxlY3RlZEJ1ZmZlclJhbmdlIiwidGV4dEVkaXRzIiwidGV4dEVkaXQiLCJhdG9tUmFuZ2UiLCJsc1JhbmdlVG9BdG9tUmFuZ2UiLCJzZXRUZXh0SW5CdWZmZXJSYW5nZSIsIm5ld1RleHQiLCJ0YWJTaXplIiwiZ2V0VGFiTGVuZ3RoIiwiaW5zZXJ0U3BhY2VzIiwiZ2V0U29mdFRhYnMiXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUE7O0FBRUE7Ozs7QUFDQTs7Ozs7O0lBRXFCQSxpQixHQUFOLE1BQU1BLGlCQUFOLENBQXdCOztBQUlyQ0MsY0FBWUMsY0FBWixFQUFzREMsa0JBQXRELEVBQW1GQyxhQUFuRixFQUEyR0MsYUFBM0csRUFBeUk7QUFDdkksU0FBS0Ms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c0NvbnRlbnQiOlsiLy8gQGZsb3dcclxuXHJcbmltcG9ydCB7TGFuZ3VhZ2VDbGllbnRDb25uZWN0aW9ufSBmcm9tICcuLi9sYW5ndWFnZWNsaWVudCc7XHJcbmltcG9ydCB0eXBlIHtGb3JtYXR0aW5nT3B0aW9ucywgVGV4dEVkaXR9IGZyb20gJy4uL2xhbmd1YWdlY2xpZW50JztcclxuaW1wb3J0IENvbnZlcnQgZnJvbSAnLi4vY29udmVydCc7XHJcbmltcG9ydCB7Q29tcG9zaXRlRGlzcG9zYWJsZX0gZnJvbSAnYXRvbSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtYXRDb2RlQWRhcHRlciB7XHJcbiAgX2Rpc3Bvc2FibGU6IENvbXBvc2l0ZURpc3Bvc2FibGU7XHJcbiAgX2xjOiBMYW5ndWFnZUNsaWVudENvbm5lY3Rpb247XHJcblxyXG4gIGNvbnN0cnVjdG9yKGxhbmd1YWdlQ2xpZW50OiBMYW5ndWFnZUNsaWVudENvbm5lY3Rpb24sIGNhbkZvcm1hdFNlbGVjdGlvbjogYm9vbGVhbiwgY2FuRm9ybWF0RmlsZTogYm9vbGVhbiwgZ3JhbW1hclNjb3BlczogQXJyYXk8c3RyaW5nPikge1xyXG4gICAgdGhpcy5fZGlzcG9zYWJsZSA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKCk7XHJcbiAgICB0aGlzLl9sYyA9IGxhbmd1YWdlQ2xpZW50O1xyXG4gICAgY29uc3Qgc2NvcGVkVGV4dEVkaXRvcnMgPSBncmFtbWFyU2NvcGVzLm1hcChnID0+IGBhdG9tLXRleHQtZWRpdG9yW2RhdGEtZ3JhbW1hcj1cIiR7Zy5yZXBsYWNlKC9cXC4vZywgJyAnKX1cIl1gKS5qb2luKCcsICcpO1xyXG4gICAgaWYgKGNhbkZvcm1hdFNlbGVjdGlvbikge1xyXG4gICAgICB0aGlzLl9kaXNwb3NhYmxlLmFkZChhdG9tLmNvbW1hbmRzLmFkZChzY29wZWRUZXh0RWRpdG9ycywgeydsYW5ndWFnZTpmb3JtYXQtc2VsZWN0aW9uJzogdGhpcy5mb3JtYXRTZWxlY3Rpb24uYmluZCh0aGlzKX0pKTtcclxuICAgIH07XHJcbiAgICBpZiAoY2FuRm9ybWF0RmlsZSkge1xyXG4gICAgICB0aGlzLl9kaXNwb3NhYmxlLmFkZChhdG9tLmNvbW1hbmRzLmFkZChzY29wZWRUZXh0RWRpdG9ycywgeydsYW5ndWFnZTpmb3JtYXQtZmlsZSc6IHRoaXMuZm9ybWF0RG9jdW1lbnQuYmluZCh0aGlzKX0pKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5fZGlzcG9zYWJsZS5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBmb3JtYXREb2N1bWVudCgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGNvbnN0IGVkaXRvciA9IGF0b20ud29ya3NwYWNlLmdldEFjdGl2ZVRleHRFZGl0b3IoKTtcclxuICAgIGlmIChlZGl0b3IgPT0gbnVsbCkgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX2xjLmRvY3VtZW50Rm9ybWF0dGluZyh7XHJcbiAgICAgIHRleHREb2N1bWVudDogQ29udmVydC5lZGl0b3JUb1RleHREb2N1bWVudElkZW50aWZpZXIoZWRpdG9yKSxcclxuICAgICAgb3B0aW9uczogRm9ybWF0Q29kZUFkYXB0ZXIuZ2V0Rm9ybWF0T3B0aW9ucyhlZGl0b3IpXHJcbiAgICB9KTtcclxuXHJcbiAgICBlZGl0b3IuZ2V0QnVmZmVyKCkudHJhbnNhY3QoKCkgPT4gRm9ybWF0Q29kZUFkYXB0ZXIuYXBwbHlUZXh0RWRpdHMoZWRpdG9yLCByZXN1bHQucmV2ZXJzZSgpKSk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBmb3JtYXRTZWxlY3Rpb24oKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBjb25zdCBlZGl0b3IgPSBhdG9tLndvcmtzcGFjZS5nZXRBY3RpdmVUZXh0RWRpdG9yKCk7XHJcbiAgICBpZiAoZWRpdG9yID09IG51bGwpIHJldHVybjtcclxuXHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLl9sYy5kb2N1bWVudFJhbmdlRm9ybWF0dGluZyh7XHJcbiAgICAgIHRleHREb2N1bWVudDogQ29udmVydC5lZGl0b3JUb1RleHREb2N1bWVudElkZW50aWZpZXIoZWRpdG9yKSxcclxuICAgICAgcmFuZ2U6IENvbnZlcnQuYXRvbVJhbmdlVG9MU1JhbmdlKGVkaXRvci5nZXRTZWxlY3RlZEJ1ZmZlclJhbmdlKCkpLFxyXG4gICAgICBvcHRpb25zOiBGb3JtYXRDb2RlQWRhcHRlci5nZXRGb3JtYXRPcHRpb25zKGVkaXRvcilcclxuICAgIH0pO1xyXG5cclxuICAgIGVkaXRvci5nZXRCdWZmZXIoKS50cmFuc2FjdCgoKSA9PiBGb3JtYXRDb2RlQWRhcHRlci5hcHBseVRleHRFZGl0cyhlZGl0b3IsIHJlc3VsdC5yZXZlcnNlKCkpKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBhcHBseVRleHRFZGl0cyhlZGl0b3I6IGF0b20kVGV4dEVkaXRvciwgdGV4dEVkaXRzOiBBcnJheTxUZXh0RWRpdD4pOiB2b2lkIHtcclxuICAgIGZvciAobGV0IHRleHRFZGl0IG9mIHRleHRFZGl0cykge1xyXG4gICAgICBjb25zdCBhdG9tUmFuZ2UgPSBDb252ZXJ0LmxzUmFuZ2VUb0F0b21SYW5nZSh0ZXh0RWRpdC5yYW5nZSk7XHJcbiAgICAgIGVkaXRvci5zZXRUZXh0SW5CdWZmZXJSYW5nZShhdG9tUmFuZ2UsIHRleHRFZGl0Lm5ld1RleHQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldEZvcm1hdE9wdGlvbnMoZWRpdG9yOiBhdG9tJFRleHRFZGl0b3IpOiBGb3JtYXR0aW5nT3B0aW9ucyB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0YWJTaXplOiBlZGl0b3IuZ2V0VGFiTGVuZ3RoKCksXHJcbiAgICAgIGluc2VydFNwYWNlczogZWRpdG9yLmdldFNvZnRUYWJzKClcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19