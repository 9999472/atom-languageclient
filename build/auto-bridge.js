Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _child_process = require('child_process');

var cp = _interopRequireWildcard(_child_process);

var _languageclientV = require('./protocol/languageclient-v2');

var ls = _interopRequireWildcard(_languageclientV);

var _vscodeJsonrpc = require('vscode-jsonrpc');

var rpc = _interopRequireWildcard(_vscodeJsonrpc);

var _consoleLogger = require('./loggers/console-logger');

var _consoleLogger2 = _interopRequireDefault(_consoleLogger);

var _nullLogger = require('./loggers/null-logger');

var _nullLogger2 = _interopRequireDefault(_nullLogger);

var _autocompleteBridge = require('./bridges/autocomplete-bridge');

var _autocompleteBridge2 = _interopRequireDefault(_autocompleteBridge);

var _documentSyncBridge = require('./bridges/document-sync-bridge');

var _documentSyncBridge2 = _interopRequireDefault(_documentSyncBridge);

var _formatCodeBridge = require('./bridges/format-code-bridge');

var _formatCodeBridge2 = _interopRequireDefault(_formatCodeBridge);

var _linterBridge = require('./bridges/linter-bridge');

var _linterBridge2 = _interopRequireDefault(_linterBridge);

var _messageNotificationsBridge = require('./bridges/message-notifications-bridge');

var _messageNotificationsBridge2 = _interopRequireDefault(_messageNotificationsBridge);

var _nuclideDefinitionBridge = require('./bridges/nuclide-definition-bridge');

var _nuclideDefinitionBridge2 = _interopRequireDefault(_nuclideDefinitionBridge);

var _nuclideFindReferencesBridge = require('./bridges/nuclide-find-references-bridge');

var _nuclideFindReferencesBridge2 = _interopRequireDefault(_nuclideFindReferencesBridge);

var _nuclideHyperclickBridge = require('./bridges/nuclide-hyperclick-bridge');

var _nuclideHyperclickBridge2 = _interopRequireDefault(_nuclideHyperclickBridge);

var _nuclideOutlineViewBridge = require('./bridges/nuclide-outline-view-bridge');

var _nuclideOutlineViewBridge2 = _interopRequireDefault(_nuclideOutlineViewBridge);

var _atom = require('atom');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

let AutoBridge = class AutoBridge {
  constructor() {
    this._disposable = new _atom.CompositeDisposable();
  }

  getName() {
    throw "Must set name field when extending AutoBridge";
  }
  getGrammarScopes() {
    throw "Must set grammarScopes field when extending AutoBridge";
  }

  activate() {
    this.logger = atom.config.get('core.debugLSP') ? new _consoleLogger2.default(this.getName()) : new _nullLogger2.default();
    this.startServer();
  }

  deactivate() {
    this._disposable.dispose();

    if (this._lc) {
      this._lc.shutdown();
    }

    if (this._process != null) {
      this._process.kill();
      this._process = null;
    };
  }

  startServer() {
    var _this = this;

    return _asyncToGenerator(function* () {
      if (_this._process != null) return;

      _this._process = yield _this.startServerProcess();

      const connection = rpc.createMessageConnection(new rpc.StreamMessageReader(_this._process.stdout), new rpc.StreamMessageWriter(_this._process.stdin), { error: function (m) {
          _this.logger.error(m);
        } });

      _this._lc = new ls.LanguageClientV2(connection, _this.logger);
      _this._lc.onLogMessage(function (m) {
        return _this.logger.log(['Log', m]);
      });

      const initializeResponse = yield _this._lc.initialize(_this.getInitializeParams());
      _this.bridgeCapabilities(initializeResponse.capabilities);
      _this.postInitialization(initializeResponse);
    })();
  }

  startServerProcess() {
    throw "Must override startServerProcess to start the language server process when extending AutoBridge";
  }

  bridgeCapabilities(capabilities) {
    this.linter = new _linterBridge2.default(this._lc);
    if (capabilities.completionProvider) {
      this.autoComplete = new _autocompleteBridge2.default(this._lc);
    }
    if (capabilities.documentSymbolProvider) {
      this.outline = new _nuclideOutlineViewBridge2.default(this._lc, this.getName());
    }
    if (capabilities.definitionProvider) {
      this.definitions = new _nuclideDefinitionBridge2.default(this._lc);
      this.hyperclick = new _nuclideHyperclickBridge2.default(this._lc);
    }
    if (capabilities.referencesProvider) {
      this.findReferences = new _nuclideFindReferencesBridge2.default(this._lc);
    }

    this._disposable.add(new _messageNotificationsBridge2.default(this._lc, this.getName()));
    if (capabilities.textDocumentSync) {
      this._disposable.add(new _documentSyncBridge2.default(this._lc, capabilities.textDocumentSync));
    }
    if (capabilities.documentRangeFormattingProvider || capabilities.documentFormattingProvider) {
      this._disposable.add(new _formatCodeBridge2.default(this._lc, capabilities.documentRangeFormattingProvider === true, capabilities.documentFormattingProvider === true));
    }
  }

  postInitialization(InitializationResult) {}

  provideOutlines() {
    return {
      name: this.getName(),
      grammarScopes: this.getGrammarScopes(),
      priority: 1,
      getOutline: this.getOutline.bind(this)
    };
  }

  getOutline(editor) {
    return this.outline != null ? this.outline.getOutline(editor) : Promise.resolve(null);
  }

  provideLinter() {
    return {
      name: this.getName(),
      grammarScopes: this.getGrammarScopes(),
      scope: 'project',
      lintOnFly: true,
      lint: this.provideLinting.bind(this)
    };
  }

  provideLinting(editor) {
    return this.linter != null ? this.linter.provideDiagnostics() : Promise.resolve([]);
  }

  provideAutocomplete() {
    return {
      selector: '.source',
      excludeLowerPriority: false,
      getSuggestions: this.provideSuggestions.bind(this)
    };
  }

  provideSuggestions(request) {
    return this.autoComplete != null ? this.autoComplete.provideSuggestions(request) : Promise.resolve([]);
  }

  provideDefinitions() {
    return {
      name: this.getName(),
      priority: 20,
      grammarScopes: this.getGrammarScopes(),
      getDefinition: this.getDefinition.bind(this),
      getDefinitionById: this.getDefinitionById.bind(this)
    };
  }

  getDefinition(editor, point) {
    return this.definitions != null ? this.definitions.getDefinition(editor, point) : Promise.resolve(null);
  }

  getDefinitionById(filename, id) {
    return Promise.resolve(null);
  }

  provideFindReferences() {
    return {
      isEditorSupported: editor => true, // TODO: Grammar-select/extension based?
      findReferences: this.getReferences.bind(this)
    };
  }

  getReferences(editor, point) {
    return this.findReferences != null ? this.findReferences.getReferences(editor, point, this.getProjectRoot()) : Promise.resolve(null);
  }

  provideHyperclick() {
    return {
      priority: 20,
      providerName: this.getName(),
      getSuggestion: this.getHyperclickSuggestion.bind(this)
    };
  }

  getHyperclickSuggestion(editor, point) {
    return this.hyperclick != null ? this.hyperclick.getSuggestion(editor, point) : Promise.resolve(null);
  }

  getProjectRoot() {
    const rootDirs = atom.project.getDirectories();
    return rootDirs.length > 0 ? rootDirs[0].path : null;
  }

  getInitializeParams() {
    return {
      processId: process.pid,
      capabilities: {},
      rootPath: this.getProjectRoot()
    };
  }
};
exports.default = AutoBridge;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2xpYi9hdXRvLWJyaWRnZS5qcyJdLCJuYW1lcyI6WyJjcCIsImxzIiwicnBjIiwiQXV0b0JyaWRnZSIsIl9kaXNwb3NhYmxlIiwiZ2V0TmFtZSIsImdldEdyYW1tYXJTY29wZXMiLCJhY3RpdmF0ZSIsImxvZ2dlciIsImF0b20iLCJjb25maWciLCJnZXQiLCJzdGFydFNlcnZlciIsImRlYWN0aXZhdGUiLCJkaXNwb3NlIiwiX2xjIiwic2h1dGRvd24iLCJfcHJvY2VzcyIsImtpbGwiLCJzdGFydFNlcnZlclByb2Nlc3MiLCJjb25uZWN0aW9uIiwiY3JlYXRlTWVzc2FnZUNvbm5lY3Rpb24iLCJTdHJlYW1NZXNzYWdlUmVhZGVyIiwic3Rkb3V0IiwiU3RyZWFtTWVzc2FnZVdyaXRlciIsInN0ZGluIiwiZXJyb3IiLCJtIiwiTGFuZ3VhZ2VDbGllbnRWMiIsIm9uTG9nTWVzc2FnZSIsImxvZyIsImluaXRpYWxpemVSZXNwb25zZSIsImluaXRpYWxpemUiLCJnZXRJbml0aWFsaXplUGFyYW1zIiwiYnJpZGdlQ2FwYWJpbGl0aWVzIiwiY2FwYWJpbGl0aWVzIiwicG9zdEluaXRpYWxpemF0aW9uIiwibGludGVyIiwiY29tcGxldGlvblByb3ZpZGVyIiwiYXV0b0NvbXBsZXRlIiwiZG9jdW1lbnRTeW1ib2xQcm92aWRlciIsIm91dGxpbmUiLCJkZWZpbml0aW9uUHJvdmlkZXIiLCJkZWZpbml0aW9ucyIsImh5cGVyY2xpY2siLCJyZWZlcmVuY2VzUHJvdmlkZXIiLCJmaW5kUmVmZXJlbmNlcyIsImFkZCIsInRleHREb2N1bWVudFN5bmMiLCJkb2N1bWVudFJhbmdlRm9ybWF0dGluZ1Byb3ZpZGVyIiwiZG9jdW1lbnRGb3JtYXR0aW5nUHJvdmlkZXIiLCJJbml0aWFsaXphdGlvblJlc3VsdCIsInByb3ZpZGVPdXRsaW5lcyIsIm5hbWUiLCJncmFtbWFyU2NvcGVzIiwicHJpb3JpdHkiLCJnZXRPdXRsaW5lIiwiYmluZCIsImVkaXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicHJvdmlkZUxpbnRlciIsInNjb3BlIiwibGludE9uRmx5IiwibGludCIsInByb3ZpZGVMaW50aW5nIiwicHJvdmlkZURpYWdub3N0aWNzIiwicHJvdmlkZUF1dG9jb21wbGV0ZSIsInNlbGVjdG9yIiwiZXhjbHVkZUxvd2VyUHJpb3JpdHkiLCJnZXRTdWdnZXN0aW9ucyIsInByb3ZpZGVTdWdnZXN0aW9ucyIsInJlcXVlc3QiLCJwcm92aWRlRGVmaW5pdGlvbnMiLCJnZXREZWZpbml0aW9uIiwiZ2V0RGVmaW5pdGlvbkJ5SWQiLCJwb2ludCIsImZpbGVuYW1lIiwiaWQiLCJwcm92aWRlRmluZFJlZmVyZW5jZXMiLCJpc0VkaXRvclN1cHBvcnRlZCIsImdldFJlZmVyZW5jZXMiLCJnZXRQcm9qZWN0Um9vdCIsInByb3ZpZGVIeXBlcmNsaWNrIiwicHJvdmlkZXJOYW1lIiwiZ2V0U3VnZ2VzdGlvbiIsImdldEh5cGVyY2xpY2tTdWdnZXN0aW9uIiwicm9vdERpcnMiLCJwcm9qZWN0IiwiZ2V0RGlyZWN0b3JpZXMiLCJsZW5ndGgiLCJwYXRoIiwicHJvY2Vzc0lkIiwicHJvY2VzcyIsInBpZCIsInJvb3RQYXRoIl0sIm1hcHBpbmdzIjoiOzs7OztBQUVBOztJQUFZQSxFOztBQUNaOztJQUFZQyxFOztBQUNaOztJQUFZQyxHOztBQUVaOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7Ozs7Ozs7SUFFcUJDLFUsR0FBTixNQUFNQSxVQUFOLENBQWlCO0FBQUE7QUFBQSxTQUM5QkMsV0FEOEIsR0FDaEIsK0JBRGdCO0FBQUE7O0FBYzlCQyxZQUFVO0FBQUUsVUFBTSwrQ0FBTjtBQUF1RDtBQUNuRUMscUJBQW1CO0FBQUUsVUFBTSx3REFBTjtBQUFnRTs7QUFFckZDLGFBQWlCO0FBQ2YsU0FBS0MsTUFBTCxHQUFjQyxLQUFLQyxNQUFMLENBQVlDLEdBQVosQ0FBZ0IsZUFBaEIsSUFB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MENrQixLQUExQyxFQUFpRCxLQUFLTSxjQUFMLEVBQWpELENBQTlCLEdBQXdHdkIsUUFBUUMsT0FBUixDQUFnQixJQUFoQixDQUEvRztBQUNEOztBQUVEdUIsc0JBQWdEO0FBQzlDLFdBQU87QUFDTDVCLGdCQUFVLEVBREw7QUFFTDZCLG9CQUFjLEtBQUsvRSxPQUFMLEVBRlQ7QUFHTGdGLHFCQUFlLEtBQUtDLHVCQUFMLENBQTZCN0IsSUFBN0IsQ0FBa0MsSUFBbEM7QUFIVixLQUFQO0FBS0Q7O0FBRUQ2QiwwQkFBd0I1QixNQUF4QixFQUFpRGtCLEtBQWpELEVBQTRHO0FBQzFHLFdBQU8sS0FBS2hDLFVBQUwsSUFBbUIsSUFBbkIsR0FBMEIsS0FBS0EsVUFBTCxDQUFnQnlDLGFBQWhCLENBQThCM0IsTUFBOUIsRUFBc0NrQixLQUF0QyxDQUExQixHQUF5RWpCLFFBQVFDLE9BQVIsQ0FBZ0IsSUFBaEIsQ0FBaEY7QUFDRDs7QUFFRHNCLG1CQUEwQjtBQUN4QixVQUFNSyxXQUF1QjlFLEtBQUsrRSxPQUFMLENBQWFDLGNBQWIsRUFBN0I7QUFDQSxXQUFPRixTQUFTRyxNQUFULEdBQWtCLENBQWxCLEdBQXNCSCxTQUFTLENBQVQsRUFBWUksSUFBbEMsR0FBeUMsSUFBaEQ7QUFDRDs7QUFFRDFELHdCQUEyQztBQUN6QyxXQUFPO0FBQ0wyRCxpQkFBV0MsUUFBUUMsR0FEZDtBQUVMM0Qsb0JBQWMsRUFGVDtBQUdMNEQsZ0JBQVUsS0FBS2IsY0FBTDtBQUhMLEtBQVA7QUFLRDtBQWhMNkIsQztrQkFBWC9FLFUiLCJmaWxlIjoiYXV0by1icmlkZ2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xyXG5cclxuaW1wb3J0ICogYXMgY3AgZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XHJcbmltcG9ydCAqIGFzIGxzIGZyb20gJy4vcHJvdG9jb2wvbGFuZ3VhZ2VjbGllbnQtdjInO1xyXG5pbXBvcnQgKiBhcyBycGMgZnJvbSAndnNjb2RlLWpzb25ycGMnO1xyXG5cclxuaW1wb3J0IENvbnNvbGVMb2dnZXIgZnJvbSAnLi9sb2dnZXJzL2NvbnNvbGUtbG9nZ2VyJztcclxuaW1wb3J0IE51bGxMb2dnZXIgZnJvbSAnLi9sb2dnZXJzL251bGwtbG9nZ2VyJztcclxuXHJcbmltcG9ydCBBdXRvY29tcGxldGVCcmlkZ2UgZnJvbSAnLi9icmlkZ2VzL2F1dG9jb21wbGV0ZS1icmlkZ2UnO1xyXG5pbXBvcnQgRG9jdW1lbnRTeW5jQnJpZGdlIGZyb20gJy4vYnJpZGdlcy9kb2N1bWVudC1zeW5jLWJyaWRnZSc7XHJcbmltcG9ydCBGb3JtYXRDb2RlQnJpZGdlIGZyb20gJy4vYnJpZGdlcy9mb3JtYXQtY29kZS1icmlkZ2UnO1xyXG5pbXBvcnQgTGludGVyQnJpZGdlIGZyb20gJy4vYnJpZGdlcy9saW50ZXItYnJpZGdlJztcclxuaW1wb3J0IE1lc3NhZ2VOb3RpZmljYXRpb25zQnJpZGdlIGZyb20gJy4vYnJpZGdlcy9tZXNzYWdlLW5vdGlmaWNhdGlvbnMtYnJpZGdlJztcclxuaW1wb3J0IE51Y2xpZGVEZWZpbml0aW9uQnJpZGdlIGZyb20gJy4vYnJpZGdlcy9udWNsaWRlLWRlZmluaXRpb24tYnJpZGdlJztcclxuaW1wb3J0IE51Y2xpZGVGaW5kUmVmZXJlbmNlc0JyaWRnZSBmcm9tICcuL2JyaWRnZXMvbnVjbGlkZS1maW5kLXJlZmVyZW5jZXMtYnJpZGdlJztcclxuaW1wb3J0IE51Y2xpZGVIeXBlcmNsaWNrQnJpZGdlIGZyb20gJy4vYnJpZGdlcy9udWNsaWRlLWh5cGVyY2xpY2stYnJpZGdlJztcclxuaW1wb3J0IE51Y2xpZGVPdXRsaW5lVmlld0JyaWRnZSBmcm9tICcuL2JyaWRnZXMvbnVjbGlkZS1vdXRsaW5lLXZpZXctYnJpZGdlJztcclxuXHJcbmltcG9ydCB7Q29tcG9zaXRlRGlzcG9zYWJsZX0gZnJvbSAnYXRvbSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdXRvQnJpZGdlIHtcclxuICBfZGlzcG9zYWJsZSA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKCk7XHJcbiAgX3Byb2Nlc3M6ID9jaGlsZF9wcm9jZXNzJENoaWxkUHJvY2VzcztcclxuICBfbGM6IGxzLkxhbmd1YWdlQ2xpZW50VjI7XHJcblxyXG4gIGF1dG9Db21wbGV0ZTogP0F1dG9jb21wbGV0ZUJyaWRnZTtcclxuICBkZWZpbml0aW9uczogP051Y2xpZGVEZWZpbml0aW9uQnJpZGdlO1xyXG4gIGZpbmRSZWZlcmVuY2VzOiA/TnVjbGlkZUZpbmRSZWZlcmVuY2VzQnJpZGdlO1xyXG4gIGh5cGVyY2xpY2s6ID9OdWNsaWRlSHlwZXJjbGlja0JyaWRnZTtcclxuICBsaW50ZXI6ID9MaW50ZXJCcmlkZ2U7XHJcbiAgb3V0bGluZTogP051Y2xpZGVPdXRsaW5lVmlld0JyaWRnZTtcclxuXHJcbiAgbG9nZ2VyOiBDb25zb2xlTG9nZ2VyIHwgTnVsbExvZ2dlcjtcclxuXHJcbiAgZ2V0TmFtZSgpIHsgdGhyb3cgXCJNdXN0IHNldCBuYW1lIGZpZWxkIHdoZW4gZXh0ZW5kaW5nIEF1dG9CcmlkZ2VcIiB9O1xyXG4gIGdldEdyYW1tYXJTY29wZXMoKSB7IHRocm93IFwiTXVzdCBzZXQgZ3JhbW1hclNjb3BlcyBmaWVsZCB3aGVuIGV4dGVuZGluZyBBdXRvQnJpZGdlXCIgfTtcclxuXHJcbiAgYWN0aXZhdGUoKTogdm9pZCB7XHJcbiAgICB0aGlzLmxvZ2dlciA9IGF0b20uY29uZmlnLmdldCgnY29yZS5kZWJ1Z0xTUCcpID8gbmV3IENvbnNvbGVMb2dnZXIodGhpcy5nZXROYW1lKCkpIDogbmV3IE51bGxMb2dnZXIoKTtcclxuICAgIHRoaXMuc3RhcnRTZXJ2ZXIoKTtcclxuICB9XHJcblxyXG4gIGRlYWN0aXZhdGUoKTogdm9pZCB7XHJcbiAgICB0aGlzLl9kaXNwb3NhYmxlLmRpc3Bvc2UoKTtcclxuXHJcbiAgICBpZiAodGhpcy5fbGMpIHtcclxuICAgICAgdGhpcy5fbGMuc2h1dGRvd24oKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5fcHJvY2VzcyAhPSBudWxsKSB7XHJcbiAgICAgIHRoaXMuX3Byb2Nlc3Mua2lsbCgpO1xyXG4gICAgICB0aGlzLl9wcm9jZXNzID0gbnVsbDtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBhc3luYyBzdGFydFNlcnZlcigpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGlmICh0aGlzLl9wcm9jZXNzICE9IG51bGwpIHJldHVybjtcclxuXHJcbiAgICB0aGlzLl9wcm9jZXNzID0gYXdhaXQgdGhpcy5zdGFydFNlcnZlclByb2Nlc3MoKTtcclxuXHJcbiAgICBjb25zdCBjb25uZWN0aW9uID0gcnBjLmNyZWF0ZU1lc3NhZ2VDb25uZWN0aW9uKFxyXG4gICAgICBuZXcgcnBjLlN0cmVhbU1lc3NhZ2VSZWFkZXIodGhpcy5fcHJvY2Vzcy5zdGRvdXQpLFxyXG4gICAgICBuZXcgcnBjLlN0cmVhbU1lc3NhZ2VXcml0ZXIodGhpcy5fcHJvY2Vzcy5zdGRpbiksXHJcbiAgICAgIHsgZXJyb3I6IChtOiBPYmplY3QpID0+IHsgdGhpcy5sb2dnZXIuZXJyb3IobSk7IH0gfSk7XHJcblxyXG4gICAgdGhpcy5fbGMgPSBuZXcgbHMuTGFuZ3VhZ2VDbGllbnRWMihjb25uZWN0aW9uLCB0aGlzLmxvZ2dlcik7XHJcbiAgICB0aGlzLl9sYy5vbkxvZ01lc3NhZ2UobSA9PiB0aGlzLmxvZ2dlci5sb2coWydMb2cnLCBtXSkpO1xyXG5cclxuICAgIGNvbnN0IGluaXRpYWxpemVSZXNwb25zZSA9IGF3YWl0IHRoaXMuX2xjLmluaXRpYWxpemUodGhpcy5nZXRJbml0aWFsaXplUGFyYW1zKCkpO1xyXG4gICAgdGhpcy5icmlkZ2VDYXBhYmlsaXRpZXMoaW5pdGlhbGl6ZVJlc3BvbnNlLmNhcGFiaWxpdGllcyk7XHJcbiAgICB0aGlzLnBvc3RJbml0aWFsaXphdGlvbihpbml0aWFsaXplUmVzcG9uc2UpO1xyXG4gIH1cclxuXHJcbiAgc3RhcnRTZXJ2ZXJQcm9jZXNzKCk6IGNoaWxkX3Byb2Nlc3MkQ2hpbGRQcm9jZXNzIHtcclxuICAgIHRocm93IFwiTXVzdCBvdmVycmlkZSBzdGFydFNlcnZlclByb2Nlc3MgdG8gc3RhcnQgdGhlIGxhbmd1YWdlIHNlcnZlciBwcm9jZXNzIHdoZW4gZXh0ZW5kaW5nIEF1dG9CcmlkZ2VcIjtcclxuICB9XHJcblxyXG4gIGJyaWRnZUNhcGFiaWxpdGllcyhjYXBhYmlsaXRpZXM6IGxzLlNlcnZlckNhcGFiaWxpdGllcyk6IHZvaWQge1xyXG4gICAgdGhpcy5saW50ZXIgPSBuZXcgTGludGVyQnJpZGdlKHRoaXMuX2xjKTtcclxuICAgIGlmIChjYXBhYmlsaXRpZXMuY29tcGxldGlvblByb3ZpZGVyKSB7XHJcbiAgICAgIHRoaXMuYXV0b0NvbXBsZXRlID0gbmV3IEF1dG9jb21wbGV0ZUJyaWRnZSh0aGlzLl9sYyk7XHJcbiAgICB9XHJcbiAgICBpZiAoY2FwYWJpbGl0aWVzLmRvY3VtZW50U3ltYm9sUHJvdmlkZXIpIHtcclxuICAgICAgdGhpcy5vdXRsaW5lID0gbmV3IE51Y2xpZGVPdXRsaW5lVmlld0JyaWRnZSh0aGlzLl9sYywgdGhpcy5nZXROYW1lKCkpO1xyXG4gICAgfVxyXG4gICAgaWYgKGNhcGFiaWxpdGllcy5kZWZpbml0aW9uUHJvdmlkZXIpIHtcclxuICAgICAgdGhpcy5kZWZpbml0aW9ucyA9IG5ldyBOdWNsaWRlRGVmaW5pdGlvbkJyaWRnZSh0aGlzLl9sYyk7XHJcbiAgICAgIHRoaXMuaHlwZXJjbGljayA9IG5ldyBOdWNsaWRlSHlwZXJjbGlja0JyaWRnZSh0aGlzLl9sYyk7XHJcbiAgICB9XHJcbiAgICBpZiAoY2FwYWJpbGl0aWVzLnJlZmVyZW5jZXNQcm92aWRlcikge1xyXG4gICAgICB0aGlzLmZpbmRSZWZlcmVuY2VzID0gbmV3IE51Y2xpZGVGaW5kUmVmZXJlbmNlc0JyaWRnZSh0aGlzLl9sYyk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fZGlzcG9zYWJsZS5hZGQobmV3IE1lc3NhZ2VOb3RpZmljYXRpb25zQnJpZGdlKHRoaXMuX2xjLCB0aGlzLmdldE5hbWUoKSkpO1xyXG4gICAgaWYgKGNhcGFiaWxpdGllcy50ZXh0RG9jdW1lbnRTeW5jKSB7XHJcbiAgICAgIHRoaXMuX2Rpc3Bvc2FibGUuYWRkKG5ldyBEb2N1bWVudFN5bmNCcmlkZ2UodGhpcy5fbGMsIGNhcGFiaWxpdGllcy50ZXh0RG9jdW1lbnRTeW5jKSk7XHJcbiAgICB9XHJcbiAgICBpZiAoY2FwYWJpbGl0aWVzLmRvY3VtZW50UmFuZ2VGb3JtYXR0aW5nUHJvdmlkZXIgfHwgY2FwYWJpbGl0aWVzLmRvY3VtZW50Rm9ybWF0dGluZ1Byb3ZpZGVyKSB7XHJcbiAgICAgIHRoaXMuX2Rpc3Bvc2FibGUuYWRkKG5ldyBGb3JtYXRDb2RlQnJpZGdlKHRoaXMuX2xjLCBjYXBhYmlsaXRpZXMuZG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdQcm92aWRlciA9PT0gdHJ1ZSwgY2FwYWJpbGl0aWVzLmRvY3VtZW50Rm9ybWF0dGluZ1Byb3ZpZGVyID09PSB0cnVlKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwb3N0SW5pdGlhbGl6YXRpb24oSW5pdGlhbGl6YXRpb25SZXN1bHQ6IGxzLkluaXRpYWxpemVSZXN1bHQpOiB2b2lkIHtcclxuICB9XHJcblxyXG4gIHByb3ZpZGVPdXRsaW5lcygpOiBudWNsaWRlJE91dGxpbmVQcm92aWRlciB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBuYW1lOiB0aGlzLmdldE5hbWUoKSxcclxuICAgICAgZ3JhbW1hclNjb3BlczogdGhpcy5nZXRHcmFtbWFyU2NvcGVzKCksXHJcbiAgICAgIHByaW9yaXR5OiAxLFxyXG4gICAgICBnZXRPdXRsaW5lOiB0aGlzLmdldE91dGxpbmUuYmluZCh0aGlzKVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGdldE91dGxpbmUoZWRpdG9yOiBhdG9tJFRleHRFZGl0b3IpOiBQcm9taXNlPD9udWNsaWRlJE91dGxpbmU+IHtcclxuICAgIHJldHVybiB0aGlzLm91dGxpbmUgIT0gbnVsbCA/IHRoaXMub3V0bGluZS5nZXRPdXRsaW5lKGVkaXRvcikgOiBQcm9taXNlLnJlc29sdmUobnVsbCk7XHJcbiAgfVxyXG5cclxuICBwcm92aWRlTGludGVyKCk6IGxpbnRlciRTdGFuZGFyZExpbnRlciB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBuYW1lOiB0aGlzLmdldE5hbWUoKSxcclxuICAgICAgZ3JhbW1hclNjb3BlczogdGhpcy5nZXRHcmFtbWFyU2NvcGVzKCksXHJcbiAgICAgIHNjb3BlOiAncHJvamVjdCcsXHJcbiAgICAgIGxpbnRPbkZseTogdHJ1ZSxcclxuICAgICAgbGludDogdGhpcy5wcm92aWRlTGludGluZy5iaW5kKHRoaXMpXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHJvdmlkZUxpbnRpbmcoZWRpdG9yOiBhdG9tJFRleHRFZGl0b3IpOiA/QXJyYXk8bGludGVyJE1lc3NhZ2U+IHwgUHJvbWlzZTw/QXJyYXk8bGludGVyJE1lc3NhZ2U+PiB7XHJcbiAgICByZXR1cm4gdGhpcy5saW50ZXIgIT0gbnVsbCA/IHRoaXMubGludGVyLnByb3ZpZGVEaWFnbm9zdGljcygpIDogUHJvbWlzZS5yZXNvbHZlKFtdKTtcclxuICB9XHJcblxyXG4gIHByb3ZpZGVBdXRvY29tcGxldGUoKTogYXRvbSRBdXRvY29tcGxldGVQcm92aWRlciB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBzZWxlY3RvcjogJy5zb3VyY2UnLFxyXG4gICAgICBleGNsdWRlTG93ZXJQcmlvcml0eTogZmFsc2UsXHJcbiAgICAgIGdldFN1Z2dlc3Rpb25zOiB0aGlzLnByb3ZpZGVTdWdnZXN0aW9ucy5iaW5kKHRoaXMpXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHJvdmlkZVN1Z2dlc3Rpb25zKHJlcXVlc3Q6IGFueSk6IFByb21pc2U8QXJyYXk8YXRvbSRBdXRvY29tcGxldGVTdWdnZXN0aW9uPj4ge1xyXG4gICAgcmV0dXJuIHRoaXMuYXV0b0NvbXBsZXRlICE9IG51bGwgPyB0aGlzLmF1dG9Db21wbGV0ZS5wcm92aWRlU3VnZ2VzdGlvbnMocmVxdWVzdCkgOiBQcm9taXNlLnJlc29sdmUoW10pO1xyXG4gIH1cclxuXHJcbiAgcHJvdmlkZURlZmluaXRpb25zKCk6IG51Y2xpZGUkRGVmaW5pdGlvblByb3ZpZGVyIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5hbWU6IHRoaXMuZ2V0TmFtZSgpLFxyXG4gICAgICBwcmlvcml0eTogMjAsXHJcbiAgICAgIGdyYW1tYXJTY29wZXM6IHRoaXMuZ2V0R3JhbW1hclNjb3BlcygpLFxyXG4gICAgICBnZXREZWZpbml0aW9uOiB0aGlzLmdldERlZmluaXRpb24uYmluZCh0aGlzKSxcclxuICAgICAgZ2V0RGVmaW5pdGlvbkJ5SWQ6IHRoaXMuZ2V0RGVmaW5pdGlvbkJ5SWQuYmluZCh0aGlzKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0RGVmaW5pdGlvbihlZGl0b3I6IFRleHRFZGl0b3IsIHBvaW50OiBhdG9tJFBvaW50KTogUHJvbWlzZTw/bnVjbGlkZSREZWZpbml0aW9uUXVlcnlSZXN1bHQ+IHtcclxuICAgIHJldHVybiB0aGlzLmRlZmluaXRpb25zICE9IG51bGwgPyB0aGlzLmRlZmluaXRpb25zLmdldERlZmluaXRpb24oZWRpdG9yLCBwb2ludCkgOiBQcm9taXNlLnJlc29sdmUobnVsbCk7XHJcbiAgfVxyXG5cclxuICBnZXREZWZpbml0aW9uQnlJZChmaWxlbmFtZTogTnVjbGlkZVVyaSwgaWQ6IHN0cmluZyk6IFByb21pc2U8P251Y2xpZGUkRGVmaW5pdGlvbj4ge1xyXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcclxuICB9XHJcblxyXG4gIHByb3ZpZGVGaW5kUmVmZXJlbmNlcygpOiBudWNsaWRlJEZpbmRSZWZlcmVuY2VzUHJvdmlkZXIge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaXNFZGl0b3JTdXBwb3J0ZWQ6IChlZGl0b3I6IGF0b20kVGV4dEVkaXRvcikgPT4gdHJ1ZSwgLy8gVE9ETzogR3JhbW1hci1zZWxlY3QvZXh0ZW5zaW9uIGJhc2VkP1xyXG4gICAgICBmaW5kUmVmZXJlbmNlczogdGhpcy5nZXRSZWZlcmVuY2VzLmJpbmQodGhpcylcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFJlZmVyZW5jZXMoZWRpdG9yOiBhdG9tJFRleHRFZGl0b3IsIHBvaW50OiBhdG9tJFBvaW50KTogUHJvbWlzZTw/bnVjbGlkZSRGaW5kUmVmZXJlbmNlc1JldHVybj4ge1xyXG4gICAgcmV0dXJuIHRoaXMuZmluZFJlZmVyZW5jZXMgIT0gbnVsbCA/IHRoaXMuZmluZFJlZmVyZW5jZXMuZ2V0UmVmZXJlbmNlcyhlZGl0b3IsIHBvaW50LCB0aGlzLmdldFByb2plY3RSb290KCkpIDogUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xyXG4gIH1cclxuXHJcbiAgcHJvdmlkZUh5cGVyY2xpY2soKTogbnVjbGlkZSRIeXBlcmNsaWNrUHJvdmlkZXIge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcHJpb3JpdHk6IDIwLFxyXG4gICAgICBwcm92aWRlck5hbWU6IHRoaXMuZ2V0TmFtZSgpLFxyXG4gICAgICBnZXRTdWdnZXN0aW9uOiB0aGlzLmdldEh5cGVyY2xpY2tTdWdnZXN0aW9uLmJpbmQodGhpcylcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBnZXRIeXBlcmNsaWNrU3VnZ2VzdGlvbihlZGl0b3I6IGF0b20kVGV4dEVkaXRvciwgcG9pbnQ6IGF0b20kUG9pbnQpOiBQcm9taXNlPD9udWNsaWRlJEh5cGVyY2xpY2tTdWdnZXN0aW9uPiB7XHJcbiAgICByZXR1cm4gdGhpcy5oeXBlcmNsaWNrICE9IG51bGwgPyB0aGlzLmh5cGVyY2xpY2suZ2V0U3VnZ2VzdGlvbihlZGl0b3IsIHBvaW50KSA6IFByb21pc2UucmVzb2x2ZShudWxsKTtcclxuICB9XHJcblxyXG4gIGdldFByb2plY3RSb290KCk6ID9zdHJpbmcge1xyXG4gICAgY29uc3Qgcm9vdERpcnM6IEFycmF5PGFueT4gPSBhdG9tLnByb2plY3QuZ2V0RGlyZWN0b3JpZXMoKTtcclxuICAgIHJldHVybiByb290RGlycy5sZW5ndGggPiAwID8gcm9vdERpcnNbMF0ucGF0aCA6IG51bGxcclxuICB9XHJcblxyXG4gIGdldEluaXRpYWxpemVQYXJhbXMoKTogbHMuSW5pdGlhbGl6ZVBhcmFtcyB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBwcm9jZXNzSWQ6IHByb2Nlc3MucGlkLFxyXG4gICAgICBjYXBhYmlsaXRpZXM6IHsgfSxcclxuICAgICAgcm9vdFBhdGg6IHRoaXMuZ2V0UHJvamVjdFJvb3QoKVxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIl19