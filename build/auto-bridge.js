Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _child_process = require('child_process');

var cp = _interopRequireWildcard(_child_process);

var _languageclientV = require('./protocol/languageclient-v2');

var ls = _interopRequireWildcard(_languageclientV);

var _vscodeJsonrpc = require('vscode-jsonrpc');

var rpc = _interopRequireWildcard(_vscodeJsonrpc);

var _autocompleteBridge = require('./bridges/autocomplete-bridge');

var _autocompleteBridge2 = _interopRequireDefault(_autocompleteBridge);

var _documentSyncBridge = require('./bridges/document-sync-bridge');

var _documentSyncBridge2 = _interopRequireDefault(_documentSyncBridge);

var _formatDocumentBridge = require('./bridges/format-document-bridge');

var _formatDocumentBridge2 = _interopRequireDefault(_formatDocumentBridge);

var _formatRangeBridge = require('./bridges/format-range-bridge');

var _formatRangeBridge2 = _interopRequireDefault(_formatRangeBridge);

var _linterBridge = require('./bridges/linter-bridge');

var _linterBridge2 = _interopRequireDefault(_linterBridge);

var _nuclideOutlineViewBridge = require('./bridges/nuclide-outline-view-bridge');

var _nuclideOutlineViewBridge2 = _interopRequireDefault(_nuclideOutlineViewBridge);

var _atom = require('atom');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

let AutoBridge = class AutoBridge {
  constructor() {
    this._disposable = new _atom.CompositeDisposable();
  }

  getName() {
    throw "Must set name field when extending AutoBridge";
  }
  getGrammarScopes() {
    throw "Must set grammarScopes field when extending AutoBridge";
  }

  activate() {
    if (atom.config.get('core.debugLSP')) this.logger = console.debug;
    this.startServer();
  }

  deactivate() {
    this._disposable.dispose();

    if (this._lc) {
      this._lc.shutdown();
    }

    if (this._process != null) {
      this._process.kill();
      this._process = null;
    };
  }

  startServer() {
    var _this = this;

    return _asyncToGenerator(function* () {
      if (_this._process != null) return;

      _this._process = yield _this.startServerProcess();

      const connection = rpc.createMessageConnection(new rpc.StreamMessageReader(_this._process.stdout), new rpc.StreamMessageWriter(_this._process.stdin), { error: function (m) {
          return _this.log('RPC Error', m);
        } });

      _this._lc = new ls.LanguageClientV2(connection, function (...m) {
        return _this.log(m);
      });
      _this._lc.onLogMessage(function (m) {
        return _this.log('Log', m);
      });

      const initializeResponse = yield _this._lc.initialize(_this.getInitializeParams());
      _this.bridgeCapabilities(initializeResponse.capabilities);
      _this.postInitialization(initializeResponse);
    })();
  }

  startServerProcess() {
    throw "Must override startServerProcess to start the language server process when extending AutoBridge";
  }

  bridgeCapabilities(capabilities) {
    this.linter = new _linterBridge2.default(this._lc);

    if (capabilities.completionProvider) {
      this.autoComplete = new _autocompleteBridge2.default(this._lc);
    }
    if (capabilities.textDocumentSync) {
      this.documentSync = new _documentSyncBridge2.default(this._lc, capabilities.textDocumentSync);
    }
    if (capabilities.documentSymbolProvider) {
      this.symbolProvider = new _nuclideOutlineViewBridge2.default(this._lc, this.getName());
    }

    if (capabilities.documentRangeFormattingProvider) {
      this._disposable.add(new _formatRangeBridge2.default(this._lc));
    }
    if (capabilities.documentFormattingProvider) {
      this._disposable.add(new _formatDocumentBridge2.default(this._lc));
    }
  }

  postInitialization(InitializationResult) {}

  provideOutlines() {
    return {
      name: this.getName(),
      grammarScopes: this.getGrammarScopes(),
      priority: 1,
      getOutline: this.getOutline.bind(this)
    };
  }

  getOutline(editor) {
    return this.symbolProvider != null ? this.symbolProvider.getOutline(editor) : Promise.resolve(null);
  }

  provideLinter() {
    return {
      name: this.getName(),
      grammarScopes: this.getGrammarScopes(),
      scope: 'project',
      lintOnFly: true,
      lint: this.provideLinting.bind(this)
    };
  }

  provideLinting(editor) {
    return this.linter != null ? this.linter.provideDiagnostics() : Promise.resolve([]);
  }

  provideAutocomplete() {
    return {
      selector: '.source',
      excludeLowerPriority: false,
      getSuggestions: this.provideSuggestions.bind(this)
    };
  }

  provideSuggestions(request) {
    return this.autoComplete != null ? this.autoComplete.provideSuggestions(request) : Promise.resolve([]);
  }

  getInitializeParams() {
    const rootDirs = atom.project.getDirectories();
    return {
      processId: process.pid,
      capabilities: {},
      rootPath: rootDirs.length > 0 ? rootDirs[0].path : null
    };
  }

  log(args) {
    if (this.logger == null) return;

    if (typeof args === 'string') {
      this.logger(`${this.getName()} ${args}`);
      return;
    }

    if (Array.isArray(args) && typeof args[0] === 'string') {
      if (args.length === 2) {
        this.logger(`${this.getName()} ${args[0]}`, args[1]);
        return;
      } else {
        this.logger(`${this.getName()} ${args[0]}`, args.slice(1));
        return;
      }
    }

    this.logger(`${this.getName()}`, args);
  }

  _logMessage(message) {
    if (message.type < ls.MessageType.Info) {
      this.log('Log', message);
    };
  }
};
exports.default = AutoBridge;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,