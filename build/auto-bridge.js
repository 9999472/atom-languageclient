Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _child_process = require('child_process');

var cp = _interopRequireWildcard(_child_process);

var _languageclientV = require('./protocol/languageclient-v2');

var ls = _interopRequireWildcard(_languageclientV);

var _vscodeJsonrpc = require('vscode-jsonrpc');

var rpc = _interopRequireWildcard(_vscodeJsonrpc);

var _autocompleteBridge = require('./bridges/autocomplete-bridge');

var _autocompleteBridge2 = _interopRequireDefault(_autocompleteBridge);

var _documentSyncBridge = require('./bridges/document-sync-bridge');

var _documentSyncBridge2 = _interopRequireDefault(_documentSyncBridge);

var _formatDocumentBridge = require('./bridges/format-document-bridge');

var _formatDocumentBridge2 = _interopRequireDefault(_formatDocumentBridge);

var _formatRangeBridge = require('./bridges/format-range-bridge');

var _formatRangeBridge2 = _interopRequireDefault(_formatRangeBridge);

var _linterBridge = require('./bridges/linter-bridge');

var _linterBridge2 = _interopRequireDefault(_linterBridge);

var _messageNotificationsBridge = require('./bridges/message-notifications-bridge');

var _messageNotificationsBridge2 = _interopRequireDefault(_messageNotificationsBridge);

var _nuclideOutlineViewBridge = require('./bridges/nuclide-outline-view-bridge');

var _nuclideOutlineViewBridge2 = _interopRequireDefault(_nuclideOutlineViewBridge);

var _atom = require('atom');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

let AutoBridge = class AutoBridge {
  constructor() {
    this._disposable = new _atom.CompositeDisposable();
  }

  getName() {
    throw "Must set name field when extending AutoBridge";
  }
  getGrammarScopes() {
    throw "Must set grammarScopes field when extending AutoBridge";
  }

  activate() {
    if (atom.config.get('core.debugLSP')) this.logger = console.debug;
    this.startServer();
  }

  deactivate() {
    this._disposable.dispose();

    if (this._lc) {
      this._lc.shutdown();
    }

    if (this._process != null) {
      this._process.kill();
      this._process = null;
    };
  }

  startServer() {
    var _this = this;

    return _asyncToGenerator(function* () {
      if (_this._process != null) return;

      _this._process = yield _this.startServerProcess();

      const connection = rpc.createMessageConnection(new rpc.StreamMessageReader(_this._process.stdout), new rpc.StreamMessageWriter(_this._process.stdin), { error: function (m) {
          _this.log(m);
        } });

      _this._lc = new ls.LanguageClientV2(connection, function (...m) {
        return _this.log(m);
      });
      _this._lc.onLogMessage(function (m) {
        return _this.log(['Log', m]);
      });

      const initializeResponse = yield _this._lc.initialize(_this.getInitializeParams());
      _this.bridgeCapabilities(initializeResponse.capabilities);
      _this.postInitialization(initializeResponse);
    })();
  }

  startServerProcess() {
    throw "Must override startServerProcess to start the language server process when extending AutoBridge";
  }

  bridgeCapabilities(capabilities) {
    this.linter = new _linterBridge2.default(this._lc);
    if (capabilities.completionProvider) {
      this.autoComplete = new _autocompleteBridge2.default(this._lc);
    }
    if (capabilities.documentSymbolProvider) {
      this.symbolProvider = new _nuclideOutlineViewBridge2.default(this._lc, this.getName());
    }

    this._disposable.add(new _messageNotificationsBridge2.default(this._lc));
    if (capabilities.textDocumentSync) {
      this._disposable.add(new _documentSyncBridge2.default(this._lc, capabilities.textDocumentSync));
    }
    if (capabilities.documentRangeFormattingProvider) {
      this._disposable.add(new _formatRangeBridge2.default(this._lc));
    }
    if (capabilities.documentFormattingProvider) {
      this._disposable.add(new _formatDocumentBridge2.default(this._lc));
    }
  }

  postInitialization(InitializationResult) {}

  provideOutlines() {
    return {
      name: this.getName(),
      grammarScopes: this.getGrammarScopes(),
      priority: 1,
      getOutline: this.getOutline.bind(this)
    };
  }

  getOutline(editor) {
    return this.symbolProvider != null ? this.symbolProvider.getOutline(editor) : Promise.resolve(null);
  }

  provideLinter() {
    return {
      name: this.getName(),
      grammarScopes: this.getGrammarScopes(),
      scope: 'project',
      lintOnFly: true,
      lint: this.provideLinting.bind(this)
    };
  }

  provideLinting(editor) {
    return this.linter != null ? this.linter.provideDiagnostics() : Promise.resolve([]);
  }

  provideAutocomplete() {
    return {
      selector: '.source',
      excludeLowerPriority: false,
      getSuggestions: this.provideSuggestions.bind(this)
    };
  }

  provideSuggestions(request) {
    return this.autoComplete != null ? this.autoComplete.provideSuggestions(request) : Promise.resolve([]);
  }

  getInitializeParams() {
    const rootDirs = atom.project.getDirectories();
    return {
      processId: process.pid,
      capabilities: {},
      rootPath: rootDirs.length > 0 ? rootDirs[0].path : null
    };
  }

  log(args) {
    if (this.logger == null) return;

    if (typeof args === 'string') {
      this.logger(`${this.getName()} ${args}`);
      return;
    }

    if (Array.isArray(args) && typeof args[0] === 'string') {
      if (args.length === 2) {
        this.logger(`${this.getName()} ${args[0]}`, args[1]);
        return;
      } else {
        this.logger(`${this.getName()} ${args[0]}`, args.slice(1));
        return;
      }
    }

    this.logger(`${this.getName()}`, args);
  }
};
exports.default = AutoBridge;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2xpYi9hdXRvLWJyaWRnZS5qcyJdLCJuYW1lcyI6WyJjcCIsImxzIiwicnBjIiwiQXV0b0JyaWRnZSIsIl9kaXNwb3NhYmxlIiwiZ2V0TmFtZSIsImdldEdyYW1tYXJTY29wZXMiLCJhY3RpdmF0ZSIsImF0b20iLCJjb25maWciLCJnZXQiLCJsb2dnZXIiLCJjb25zb2xlIiwiZGVidWciLCJzdGFydFNlcnZlciIsImRlYWN0aXZhdGUiLCJkaXNwb3NlIiwiX2xjIiwic2h1dGRvd24iLCJfcHJvY2VzcyIsImtpbGwiLCJzdGFydFNlcnZlclByb2Nlc3MiLCJjb25uZWN0aW9uIiwiY3JlYXRlTWVzc2FnZUNvbm5lY3Rpb24iLCJTdHJlYW1NZXNzYWdlUmVhZGVyIiwic3Rkb3V0IiwiU3RyZWFtTWVzc2FnZVdyaXRlciIsInN0ZGluIiwiZXJyb3IiLCJtIiwibG9nIiwiTGFuZ3VhZ2VDbGllbnRWMiIsIm9uTG9nTWVzc2FnZSIsImluaXRpYWxpemVSZXNwb25zZSIsImluaXRpYWxpemUiLCJnZXRJbml0aWFsaXplUGFyYW1zIiwiYnJpZGdlQ2FwYWJpbGl0aWVzIiwiY2FwYWJpbGl0aWVzIiwicG9zdEluaXRpYWxpemF0aW9uIiwibGludGVyIiwiY29tcGxldGlvblByb3ZpZGVyIiwiYXV0b0NvbXBsZXRlIiwiZG9jdW1lbnRTeW1ib2xQcm92aWRlciIsInN5bWJvbFByb3ZpZGVyIiwiYWRkIiwidGV4dERvY3VtZW50U3luYyIsImRvY3VtZW50UmFuZ2VGb3JtYXR0aW5nUHJvdmlkZXIiLCJkb2N1bWVudEZvcm1hdHRpbmdQcm92aWRlciIsIkluaXRpYWxpemF0aW9uUmVzdWx0IiwicHJvdmlkZU91dGxpbmVzIiwibmFtZSIsImdyYW1tYXJTY29wZXMiLCJwcmlvcml0eSIsImdldE91dGxpbmUiLCJiaW5kIiwiZWRpdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJwcm92aWRlTGludGVyIiwic2NvcGUiLCJsaW50T25GbHkiLCJsaW50IiwicHJvdmlkZUxpbnRpbmciLCJwcm92aWRlRGlhZ25vc3RpY3MiLCJwcm92aWRlQXV0b2NvbXBsZXRlIiwic2VsZWN0b3IiLCJleGNsdWRlTG93ZXJQcmlvcml0eSIsImdldFN1Z2dlc3Rpb25zIiwicHJvdmlkZVN1Z2dlc3Rpb25zIiwicmVxdWVzdCIsInJvb3REaXJzIiwicHJvamVjdCIsImdldERpcmVjdG9yaWVzIiwicHJvY2Vzc0lkIiwicHJvY2VzcyIsInBpZCIsInJvb3RQYXRoIiwibGVuZ3RoIiwicGF0aCIsImFyZ3MiLCJBcnJheSIsImlzQXJyYXkiLCJzbGljZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQTs7SUFBWUEsRTs7QUFDWjs7SUFBWUMsRTs7QUFDWjs7SUFBWUMsRzs7QUFFWjs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7Ozs7OztJQUVxQkMsVSxHQUFOLE1BQU1BLFVBQU4sQ0FBaUI7QUFBQTtBQUFBLFNBQzlCQyxXQUQ4QixHQUNoQiwrQkFEZ0I7QUFBQTs7QUFVOUJDLFlBQVU7QUFBRSxVQUFNLCtDQUFOO0FBQXVEO0FBQ25FQyxxQkFBbUI7QUFBRSxVQUFNLHdEQUFOO0FBQWdFOztBQUVyRkMsYUFBaUI7QUFDZixRQUFJQyxLQUFLQyxNQUFMLENBQVlDLEdBQVosQ0FBZ0IsZUFBaEIsQ0FBSixFQUFzQyxLQUFLQyxNQUFMLEdBQWNDLFFBQVFDLEtBQXRCO0FBQ3RDLFNBQUtDLFdBQUw7QUFDRDs7QUFFREMsZUFBbUI7QUFDakIsU0FBS1gsV0FBTCxDQUFpQlksT0FBakI7O0FBRUEsUUFBSSxLQUFLQyxHQUFULEVBQWM7QUFDWixXQUFLQSxHQUFMLENBQVNDLFFBQVQ7QUFDRDs7QUFFRCxRQUFJLEtBQUtDLFFBQUwsSUFBaUIsSUFBckIsRUFBMkI7QUFDekIsV0FBS0EsUUFBTCxDQUFjQyxJQUFkO0FBQ0EsV0FBS0QsUUFBTCxHQUFnQixJQUFoQjtBQUNEO0FBQ0Y7O0FBRUtMLGFBQU4sR0FBbUM7QUFBQTs7QUFBQTtBQUNqQyxVQUFJ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RzBFLElBQUssRUFBdEM7QUFDQTtBQUNEOztBQUVELFFBQUlDLE1BQU1DLE9BQU4sQ0FBY0YsSUFBZCxLQUF1QixPQUFPQSxLQUFLLENBQUwsQ0FBUCxLQUFtQixRQUE5QyxFQUF3RDtBQUN0RCxVQUFJQSxLQUFLRixNQUFMLEtBQWdCLENBQXBCLEVBQXVCO0FBQ3JCLGFBQUtsRSxNQUFMLENBQWEsR0FBRSxLQUFLTixPQUFMLEVBQWUsSUFBRzBFLEtBQUssQ0FBTCxDQUFRLEVBQXpDLEVBQTRDQSxLQUFLLENBQUwsQ0FBNUM7QUFDQTtBQUNELE9BSEQsTUFHTztBQUNMLGFBQUtwRSxNQUFMLENBQWEsR0FBRSxLQUFLTixPQUFMLEVBQWUsSUFBRzBFLEtBQUssQ0FBTCxDQUFRLEVBQXpDLEVBQTRDQSxLQUFLRyxLQUFMLENBQVcsQ0FBWCxDQUE1QztBQUNBO0FBQ0Q7QUFDRjs7QUFFRCxTQUFLdkUsTUFBTCxDQUFhLEdBQUUsS0FBS04sT0FBTCxFQUFlLEVBQTlCLEVBQWlDMEUsSUFBakM7QUFDRDtBQWhKNkIsQztrQkFBWDVFLFUiLCJmaWxlIjoiYXV0by1icmlkZ2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xyXG5cclxuaW1wb3J0ICogYXMgY3AgZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XHJcbmltcG9ydCAqIGFzIGxzIGZyb20gJy4vcHJvdG9jb2wvbGFuZ3VhZ2VjbGllbnQtdjInO1xyXG5pbXBvcnQgKiBhcyBycGMgZnJvbSAndnNjb2RlLWpzb25ycGMnO1xyXG5cclxuaW1wb3J0IEF1dG9jb21wbGV0ZUJyaWRnZSBmcm9tICcuL2JyaWRnZXMvYXV0b2NvbXBsZXRlLWJyaWRnZSc7XHJcbmltcG9ydCBEb2N1bWVudFN5bmNCcmlkZ2UgZnJvbSAnLi9icmlkZ2VzL2RvY3VtZW50LXN5bmMtYnJpZGdlJztcclxuaW1wb3J0IEZvcm1hdERvY3VtZW50QnJpZGdlIGZyb20gJy4vYnJpZGdlcy9mb3JtYXQtZG9jdW1lbnQtYnJpZGdlJztcclxuaW1wb3J0IEZvcm1hdFJhbmdlQnJpZGdlIGZyb20gJy4vYnJpZGdlcy9mb3JtYXQtcmFuZ2UtYnJpZGdlJztcclxuaW1wb3J0IExpbnRlckJyaWRnZSBmcm9tICcuL2JyaWRnZXMvbGludGVyLWJyaWRnZSc7XHJcbmltcG9ydCBNZXNzYWdlTm90aWZpY2F0aW9uc0JyaWRnZSBmcm9tICcuL2JyaWRnZXMvbWVzc2FnZS1ub3RpZmljYXRpb25zLWJyaWRnZSc7XHJcbmltcG9ydCBOdWNsaWRlT3V0bGluZVZpZXdCcmlkZ2UgZnJvbSAnLi9icmlkZ2VzL251Y2xpZGUtb3V0bGluZS12aWV3LWJyaWRnZSc7XHJcblxyXG5pbXBvcnQge0NvbXBvc2l0ZURpc3Bvc2FibGV9IGZyb20gJ2F0b20nO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXV0b0JyaWRnZSB7XHJcbiAgX2Rpc3Bvc2FibGUgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpO1xyXG4gIF9wcm9jZXNzOiA/Y2hpbGRfcHJvY2VzcyRDaGlsZFByb2Nlc3M7XHJcbiAgX2xjOiBscy5MYW5ndWFnZUNsaWVudFYyO1xyXG5cclxuICBhdXRvQ29tcGxldGU6ID9BdXRvY29tcGxldGVCcmlkZ2U7XHJcbiAgbGludGVyOiA/TGludGVyQnJpZGdlO1xyXG4gIHN5bWJvbFByb3ZpZGVyOiA/TnVjbGlkZU91dGxpbmVWaWV3QnJpZGdlO1xyXG4gIGxvZ2dlcjogKG06IHN0cmluZyB8IEFycmF5PGFueT4pID0+IHZvaWQ7XHJcblxyXG4gIGdldE5hbWUoKSB7IHRocm93IFwiTXVzdCBzZXQgbmFtZSBmaWVsZCB3aGVuIGV4dGVuZGluZyBBdXRvQnJpZGdlXCIgfTtcclxuICBnZXRHcmFtbWFyU2NvcGVzKCkgeyB0aHJvdyBcIk11c3Qgc2V0IGdyYW1tYXJTY29wZXMgZmllbGQgd2hlbiBleHRlbmRpbmcgQXV0b0JyaWRnZVwiIH07XHJcblxyXG4gIGFjdGl2YXRlKCk6IHZvaWQge1xyXG4gICAgaWYgKGF0b20uY29uZmlnLmdldCgnY29yZS5kZWJ1Z0xTUCcpKSB0aGlzLmxvZ2dlciA9IGNvbnNvbGUuZGVidWc7XHJcbiAgICB0aGlzLnN0YXJ0U2VydmVyKCk7XHJcbiAgfVxyXG5cclxuICBkZWFjdGl2YXRlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5fZGlzcG9zYWJsZS5kaXNwb3NlKCk7XHJcblxyXG4gICAgaWYgKHRoaXMuX2xjKSB7XHJcbiAgICAgIHRoaXMuX2xjLnNodXRkb3duKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuX3Byb2Nlc3MgIT0gbnVsbCkge1xyXG4gICAgICB0aGlzLl9wcm9jZXNzLmtpbGwoKTtcclxuICAgICAgdGhpcy5fcHJvY2VzcyA9IG51bGw7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgc3RhcnRTZXJ2ZXIoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBpZiAodGhpcy5fcHJvY2VzcyAhPSBudWxsKSByZXR1cm47XHJcblxyXG4gICAgdGhpcy5fcHJvY2VzcyA9IGF3YWl0IHRoaXMuc3RhcnRTZXJ2ZXJQcm9jZXNzKCk7XHJcblxyXG4gICAgY29uc3QgY29ubmVjdGlvbiA9IHJwYy5jcmVhdGVNZXNzYWdlQ29ubmVjdGlvbihcclxuICAgICAgbmV3IHJwYy5TdHJlYW1NZXNzYWdlUmVhZGVyKHRoaXMuX3Byb2Nlc3Muc3Rkb3V0KSxcclxuICAgICAgbmV3IHJwYy5TdHJlYW1NZXNzYWdlV3JpdGVyKHRoaXMuX3Byb2Nlc3Muc3RkaW4pLFxyXG4gICAgICB7IGVycm9yOiAobTogT2JqZWN0KSA9PiB7IHRoaXMubG9nKG0pOyB9IH0pO1xyXG5cclxuICAgIHRoaXMuX2xjID0gbmV3IGxzLkxhbmd1YWdlQ2xpZW50VjIoY29ubmVjdGlvbiwgKC4uLm0pID0+IHRoaXMubG9nKG0pKTtcclxuICAgIHRoaXMuX2xjLm9uTG9nTWVzc2FnZShtID0+IHRoaXMubG9nKFsnTG9nJywgbV0pKTtcclxuXHJcbiAgICBjb25zdCBpbml0aWFsaXplUmVzcG9uc2UgPSBhd2FpdCB0aGlzLl9sYy5pbml0aWFsaXplKHRoaXMuZ2V0SW5pdGlhbGl6ZVBhcmFtcygpKTtcclxuICAgIHRoaXMuYnJpZGdlQ2FwYWJpbGl0aWVzKGluaXRpYWxpemVSZXNwb25zZS5jYXBhYmlsaXRpZXMpO1xyXG4gICAgdGhpcy5wb3N0SW5pdGlhbGl6YXRpb24oaW5pdGlhbGl6ZVJlc3BvbnNlKTtcclxuICB9XHJcblxyXG4gIHN0YXJ0U2VydmVyUHJvY2VzcygpOiBjaGlsZF9wcm9jZXNzJENoaWxkUHJvY2VzcyB7XHJcbiAgICB0aHJvdyBcIk11c3Qgb3ZlcnJpZGUgc3RhcnRTZXJ2ZXJQcm9jZXNzIHRvIHN0YXJ0IHRoZSBsYW5ndWFnZSBzZXJ2ZXIgcHJvY2VzcyB3aGVuIGV4dGVuZGluZyBBdXRvQnJpZGdlXCI7XHJcbiAgfVxyXG5cclxuICBicmlkZ2VDYXBhYmlsaXRpZXMoY2FwYWJpbGl0aWVzOiBscy5TZXJ2ZXJDYXBhYmlsaXRpZXMpOiB2b2lkIHtcclxuICAgIHRoaXMubGludGVyID0gbmV3IExpbnRlckJyaWRnZSh0aGlzLl9sYyk7XHJcbiAgICBpZiAoY2FwYWJpbGl0aWVzLmNvbXBsZXRpb25Qcm92aWRlcikge1xyXG4gICAgICB0aGlzLmF1dG9Db21wbGV0ZSA9IG5ldyBBdXRvY29tcGxldGVCcmlkZ2UodGhpcy5fbGMpO1xyXG4gICAgfVxyXG4gICAgaWYgKGNhcGFiaWxpdGllcy5kb2N1bWVudFN5bWJvbFByb3ZpZGVyKSB7XHJcbiAgICAgIHRoaXMuc3ltYm9sUHJvdmlkZXIgPSBuZXcgTnVjbGlkZU91dGxpbmVWaWV3QnJpZGdlKHRoaXMuX2xjLCB0aGlzLmdldE5hbWUoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fZGlzcG9zYWJsZS5hZGQobmV3IE1lc3NhZ2VOb3RpZmljYXRpb25zQnJpZGdlKHRoaXMuX2xjKSk7XHJcbiAgICBpZiAoY2FwYWJpbGl0aWVzLnRleHREb2N1bWVudFN5bmMpIHtcclxuICAgICAgdGhpcy5fZGlzcG9zYWJsZS5hZGQobmV3IERvY3VtZW50U3luY0JyaWRnZSh0aGlzLl9sYywgY2FwYWJpbGl0aWVzLnRleHREb2N1bWVudFN5bmMpKTtcclxuICAgIH1cclxuICAgIGlmIChjYXBhYmlsaXRpZXMuZG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdQcm92aWRlcikge1xyXG4gICAgICB0aGlzLl9kaXNwb3NhYmxlLmFkZChuZXcgRm9ybWF0UmFuZ2VCcmlkZ2UodGhpcy5fbGMpKTtcclxuICAgIH1cclxuICAgIGlmIChjYXBhYmlsaXRpZXMuZG9jdW1lbnRGb3JtYXR0aW5nUHJvdmlkZXIpIHtcclxuICAgICAgdGhpcy5fZGlzcG9zYWJsZS5hZGQobmV3IEZvcm1hdERvY3VtZW50QnJpZGdlKHRoaXMuX2xjKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwb3N0SW5pdGlhbGl6YXRpb24oSW5pdGlhbGl6YXRpb25SZXN1bHQ6IGxzLkluaXRpYWxpemVSZXN1bHQpOiB2b2lkIHtcclxuICB9XHJcblxyXG4gIHByb3ZpZGVPdXRsaW5lcygpOiBudWNsaWRlJE91dGxpbmVQcm92aWRlciB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBuYW1lOiB0aGlzLmdldE5hbWUoKSxcclxuICAgICAgZ3JhbW1hclNjb3BlczogdGhpcy5nZXRHcmFtbWFyU2NvcGVzKCksXHJcbiAgICAgIHByaW9yaXR5OiAxLFxyXG4gICAgICBnZXRPdXRsaW5lOiB0aGlzLmdldE91dGxpbmUuYmluZCh0aGlzKVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGdldE91dGxpbmUoZWRpdG9yOiBhdG9tJFRleHRFZGl0b3IpOiBQcm9taXNlPD9udWNsaWRlJE91dGxpbmU+IHtcclxuICAgIHJldHVybiB0aGlzLnN5bWJvbFByb3ZpZGVyICE9IG51bGwgPyB0aGlzLnN5bWJvbFByb3ZpZGVyLmdldE91dGxpbmUoZWRpdG9yKSA6IFByb21pc2UucmVzb2x2ZShudWxsKTtcclxuICB9XHJcblxyXG4gIHByb3ZpZGVMaW50ZXIoKTogbGludGVyJFN0YW5kYXJkTGludGVyIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5hbWU6IHRoaXMuZ2V0TmFtZSgpLFxyXG4gICAgICBncmFtbWFyU2NvcGVzOiB0aGlzLmdldEdyYW1tYXJTY29wZXMoKSxcclxuICAgICAgc2NvcGU6ICdwcm9qZWN0JyxcclxuICAgICAgbGludE9uRmx5OiB0cnVlLFxyXG4gICAgICBsaW50OiB0aGlzLnByb3ZpZGVMaW50aW5nLmJpbmQodGhpcylcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwcm92aWRlTGludGluZyhlZGl0b3I6IGF0b20kVGV4dEVkaXRvcik6ID9BcnJheTxsaW50ZXIkTWVzc2FnZT4gfCBQcm9taXNlPD9BcnJheTxsaW50ZXIkTWVzc2FnZT4+IHtcclxuICAgIHJldHVybiB0aGlzLmxpbnRlciAhPSBudWxsID8gdGhpcy5saW50ZXIucHJvdmlkZURpYWdub3N0aWNzKCkgOiBQcm9taXNlLnJlc29sdmUoW10pO1xyXG4gIH1cclxuXHJcbiAgcHJvdmlkZUF1dG9jb21wbGV0ZSgpOiBhdG9tJEF1dG9jb21wbGV0ZVByb3ZpZGVyIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHNlbGVjdG9yOiAnLnNvdXJjZScsXHJcbiAgICAgIGV4Y2x1ZGVMb3dlclByaW9yaXR5OiBmYWxzZSxcclxuICAgICAgZ2V0U3VnZ2VzdGlvbnM6IHRoaXMucHJvdmlkZVN1Z2dlc3Rpb25zLmJpbmQodGhpcylcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwcm92aWRlU3VnZ2VzdGlvbnMocmVxdWVzdDogYW55KTogUHJvbWlzZTxBcnJheTxhdG9tJEF1dG9jb21wbGV0ZVN1Z2dlc3Rpb24+PiB7XHJcbiAgICByZXR1cm4gdGhpcy5hdXRvQ29tcGxldGUgIT0gbnVsbCA/IHRoaXMuYXV0b0NvbXBsZXRlLnByb3ZpZGVTdWdnZXN0aW9ucyhyZXF1ZXN0KSA6IFByb21pc2UucmVzb2x2ZShbXSk7XHJcbiAgfVxyXG5cclxuICBnZXRJbml0aWFsaXplUGFyYW1zKCk6IGxzLkluaXRpYWxpemVQYXJhbXMge1xyXG4gICAgY29uc3Qgcm9vdERpcnM6IEFycmF5PGFueT4gPSBhdG9tLnByb2plY3QuZ2V0RGlyZWN0b3JpZXMoKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHByb2Nlc3NJZDogcHJvY2Vzcy5waWQsXHJcbiAgICAgIGNhcGFiaWxpdGllczogeyB9LFxyXG4gICAgICByb290UGF0aDogcm9vdERpcnMubGVuZ3RoID4gMCA/IHJvb3REaXJzWzBdLnBhdGggOiBudWxsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgbG9nKGFyZ3M6IE9iamVjdCB8IEFycmF5PGFueT4pOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmxvZ2dlciA9PSBudWxsKSByZXR1cm47XHJcblxyXG4gICAgaWYgKHR5cGVvZiBhcmdzID09PSAnc3RyaW5nJykge1xyXG4gICAgICB0aGlzLmxvZ2dlcihgJHt0aGlzLmdldE5hbWUoKX0gJHthcmdzfWApO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYXJncykgJiYgdHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMikge1xyXG4gICAgICAgIHRoaXMubG9nZ2VyKGAke3RoaXMuZ2V0TmFtZSgpfSAke2FyZ3NbMF19YCwgYXJnc1sxXSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMubG9nZ2VyKGAke3RoaXMuZ2V0TmFtZSgpfSAke2FyZ3NbMF19YCwgYXJncy5zbGljZSgxKSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5sb2dnZXIoYCR7dGhpcy5nZXROYW1lKCl9YCwgYXJncyk7XHJcbiAgfVxyXG59XHJcbiJdfQ==