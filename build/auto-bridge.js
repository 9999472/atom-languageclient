Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _child_process = require('child_process');

var cp = _interopRequireWildcard(_child_process);

var _languageclientV = require('./protocol/languageclient-v2');

var ls = _interopRequireWildcard(_languageclientV);

var _vscodeJsonrpc = require('vscode-jsonrpc');

var rpc = _interopRequireWildcard(_vscodeJsonrpc);

var _consoleLogger = require('./loggers/console-logger');

var _consoleLogger2 = _interopRequireDefault(_consoleLogger);

var _nullLogger = require('./loggers/null-logger');

var _nullLogger2 = _interopRequireDefault(_nullLogger);

var _autocompleteBridge = require('./bridges/autocomplete-bridge');

var _autocompleteBridge2 = _interopRequireDefault(_autocompleteBridge);

var _documentSyncBridge = require('./bridges/document-sync-bridge');

var _documentSyncBridge2 = _interopRequireDefault(_documentSyncBridge);

var _formatDocumentBridge = require('./bridges/format-document-bridge');

var _formatDocumentBridge2 = _interopRequireDefault(_formatDocumentBridge);

var _formatRangeBridge = require('./bridges/format-range-bridge');

var _formatRangeBridge2 = _interopRequireDefault(_formatRangeBridge);

var _linterBridge = require('./bridges/linter-bridge');

var _linterBridge2 = _interopRequireDefault(_linterBridge);

var _messageNotificationsBridge = require('./bridges/message-notifications-bridge');

var _messageNotificationsBridge2 = _interopRequireDefault(_messageNotificationsBridge);

var _nuclideDefinitionBridge = require('./bridges/nuclide-definition-bridge');

var _nuclideDefinitionBridge2 = _interopRequireDefault(_nuclideDefinitionBridge);

var _nuclideFindReferencesBridge = require('./bridges/nuclide-find-references-bridge');

var _nuclideFindReferencesBridge2 = _interopRequireDefault(_nuclideFindReferencesBridge);

var _nuclideHyperclickBridge = require('./bridges/nuclide-hyperclick-bridge');

var _nuclideHyperclickBridge2 = _interopRequireDefault(_nuclideHyperclickBridge);

var _nuclideOutlineViewBridge = require('./bridges/nuclide-outline-view-bridge');

var _nuclideOutlineViewBridge2 = _interopRequireDefault(_nuclideOutlineViewBridge);

var _atom = require('atom');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

let AutoBridge = class AutoBridge {
  constructor() {
    this._disposable = new _atom.CompositeDisposable();
  }

  getName() {
    throw "Must set name field when extending AutoBridge";
  }
  getGrammarScopes() {
    throw "Must set grammarScopes field when extending AutoBridge";
  }

  activate() {
    this.logger = atom.config.get('core.debugLSP') ? new _consoleLogger2.default(this.getName()) : new _nullLogger2.default();
    this.startServer();
  }

  deactivate() {
    this._disposable.dispose();

    if (this._lc) {
      this._lc.shutdown();
    }

    if (this._process != null) {
      this._process.kill();
      this._process = null;
    };
  }

  startServer() {
    var _this = this;

    return _asyncToGenerator(function* () {
      if (_this._process != null) return;

      _this._process = yield _this.startServerProcess();

      const connection = rpc.createMessageConnection(new rpc.StreamMessageReader(_this._process.stdout), new rpc.StreamMessageWriter(_this._process.stdin), { error: function (m) {
          _this.logger.error(m);
        } });

      _this._lc = new ls.LanguageClientV2(connection, _this.logger);
      _this._lc.onLogMessage(function (m) {
        return _this.logger.log(['Log', m]);
      });

      const initializeResponse = yield _this._lc.initialize(_this.getInitializeParams());
      _this.bridgeCapabilities(initializeResponse.capabilities);
      _this.postInitialization(initializeResponse);
    })();
  }

  startServerProcess() {
    throw "Must override startServerProcess to start the language server process when extending AutoBridge";
  }

  bridgeCapabilities(capabilities) {
    this.linter = new _linterBridge2.default(this._lc);
    if (capabilities.completionProvider) {
      this.autoComplete = new _autocompleteBridge2.default(this._lc);
    }
    if (capabilities.documentSymbolProvider) {
      this.outline = new _nuclideOutlineViewBridge2.default(this._lc, this.getName());
    }
    if (capabilities.definitionProvider) {
      this.definitions = new _nuclideDefinitionBridge2.default(this._lc);
      this.hyperclick = new _nuclideHyperclickBridge2.default(this._lc);
    }
    if (capabilities.referencesProvider) {
      this.findReferences = new _nuclideFindReferencesBridge2.default(this._lc);
    }

    this._disposable.add(new _messageNotificationsBridge2.default(this._lc, this.getName()));
    if (capabilities.textDocumentSync) {
      this._disposable.add(new _documentSyncBridge2.default(this._lc, capabilities.textDocumentSync));
    }
    if (capabilities.documentRangeFormattingProvider) {
      this._disposable.add(new _formatRangeBridge2.default(this._lc));
    }
    if (capabilities.documentFormattingProvider) {
      this._disposable.add(new _formatDocumentBridge2.default(this._lc));
    }
  }

  postInitialization(InitializationResult) {}

  provideOutlines() {
    return {
      name: this.getName(),
      grammarScopes: this.getGrammarScopes(),
      priority: 1,
      getOutline: this.getOutline.bind(this)
    };
  }

  getOutline(editor) {
    return this.outline != null ? this.outline.getOutline(editor) : Promise.resolve(null);
  }

  provideLinter() {
    return {
      name: this.getName(),
      grammarScopes: this.getGrammarScopes(),
      scope: 'project',
      lintOnFly: true,
      lint: this.provideLinting.bind(this)
    };
  }

  provideLinting(editor) {
    return this.linter != null ? this.linter.provideDiagnostics() : Promise.resolve([]);
  }

  provideAutocomplete() {
    return {
      selector: '.source',
      excludeLowerPriority: false,
      getSuggestions: this.provideSuggestions.bind(this)
    };
  }

  provideSuggestions(request) {
    return this.autoComplete != null ? this.autoComplete.provideSuggestions(request) : Promise.resolve([]);
  }

  provideDefinitions() {
    return {
      name: this.getName(),
      priority: 20,
      grammarScopes: this.getGrammarScopes(),
      getDefinition: this.getDefinition.bind(this),
      getDefinitionById: this.getDefinitionById.bind(this)
    };
  }

  getDefinition(editor, point) {
    return this.definitions != null ? this.definitions.getDefinition(editor, point) : Promise.resolve(null);
  }

  getDefinitionById(filename, id) {
    return Promise.resolve(null);
  }

  provideFindReferences() {
    return {
      isEditorSupported: editor => true, // TODO: Grammar-select/extension based?
      findReferences: this.getReferences.bind(this)
    };
  }

  getReferences(editor, point) {
    return this.findReferences != null ? this.findReferences.getReferences(editor, point, this.getProjectRoot()) : Promise.resolve(null);
  }

  provideHyperclick() {
    return {
      priority: 20,
      providerName: this.getName(),
      getSuggestion: this.getHyperclickSuggestion.bind(this)
    };
  }

  getHyperclickSuggestion(editor, point) {
    return this.hyperclick != null ? this.hyperclick.getSuggestion(editor, point) : Promise.resolve(null);
  }

  getProjectRoot() {
    const rootDirs = atom.project.getDirectories();
    return rootDirs.length > 0 ? rootDirs[0].path : null;
  }

  getInitializeParams() {
    return {
      processId: process.pid,
      capabilities: {},
      rootPath: this.getProjectRoot()
    };
  }
};
exports.default = AutoBridge;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,