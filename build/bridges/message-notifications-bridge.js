Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _languageclientV = require('../protocol/languageclient-v2');

var _convert = require('../convert');

var _convert2 = _interopRequireDefault(_convert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let MessageNotificationsBridge = class MessageNotificationsBridge {

  constructor(languageClient, name) {
    this._lc = languageClient;
    this._name = name;
    this._lc.onShowMessage(this.onShowMessage.bind(this));
  }

  dispose() {}

  // TODO: Wire up onShowMessageRequest

  onShowMessage(params) {
    const options = { dismissable: true, detail: this._name };
    switch (params.type) {
      case _languageclientV.MessageType.Error:
        atom.notifications.addError(params.message, options);
        return;
      case _languageclientV.MessageType.Warning:
        atom.notifications.addWarning(params.message, options);
        return;
      case _languageclientV.MessageType.Log:
        console.log(params.message);
        return;
      case _languageclientV.MessageType.Info:
      default:
        atom.notifications.addInfo(params.message, options);
        return;
    }
  }

  static actionItemToNotificationButton(actionItem) {
    return {
      text: actionItem.title
    };
  }
};
exports.default = MessageNotificationsBridge;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9icmlkZ2VzL21lc3NhZ2Utbm90aWZpY2F0aW9ucy1icmlkZ2UuanMiXSwibmFtZXMiOlsiTWVzc2FnZU5vdGlmaWNhdGlvbnNCcmlkZ2UiLCJjb25zdHJ1Y3RvciIsImxhbmd1YWdlQ2xpZW50IiwibmFtZSIsIl9sYyIsIl9uYW1lIiwib25TaG93TWVzc2FnZSIsImJpbmQiLCJkaXNwb3NlIiwicGFyYW1zIiwib3B0aW9ucyIsImRpc21pc3NhYmxlIiwiZGV0YWlsIiwidHlwZSIsIkVycm9yIiwiYXRvbSIsIm5vdGlmaWNhdGlvbnMiLCJhZGRFcnJvciIsIm1lc3NhZ2UiLCJXYXJuaW5nIiwiYWRkV2FybmluZyIsIkxvZyIsImNvbnNvbGUiLCJsb2ciLCJJbmZvIiwiYWRkSW5mbyIsImFjdGlvbkl0ZW1Ub05vdGlmaWNhdGlvbkJ1dHRvbiIsImFjdGlvbkl0ZW0iLCJ0ZXh0IiwidGl0bGUiXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUE7O0FBRUE7Ozs7OztJQUVxQkEsMEIsR0FBTixNQUFNQSwwQkFBTixDQUFpQzs7QUFJOUNDLGNBQVlDLGNBQVosRUFBOENDLElBQTlDLEVBQTREO0FBQzFELFNBQUtDLEdBQUwsR0FBV0YsY0FBWDtBQUNBLFNBQUtHLEtBQUwsR0FBYUYsSUFBYjtBQUNBLFNBQUtDLEdBQUwsQ0FBU0UsYUFBVCxDQUF1QixLQUFLQSxhQUFMLENBQW1CQyxJQUFuQixDQUF3QixJQUF4QixDQUF2QjtBQUNEOztBQUVEQyxZQUFnQixDQUNmOztBQUVEOztBQUVBRixnQkFBY0csTUFBZCxFQUErQztBQUM3QyxVQUFNQyxVQUFVLEVBQUVDLGFBQWEsSUFBZixFQUFxQkMsUUFBUSxLQUFLUCxLQUFsQyxFQUFoQjtBQUNBLFlBQU9JLE9BQU9JLElBQWQ7QUFDRSxXQUFLLDZCQUFZQyxLQUFqQjtBQUNFQyxhQUFLQyxhQUFMLENBQW1CQyxRQUFuQixDQUE0QlIsT0FBT1MsT0FBbkMsRUFBNENSLE9BQTVDO0FBQ0E7QUFDRixXQUFLLDZCQUFZUyxPQUFqQjtBQUNFSixhQUFLQyxhQUFMLENBQW1CSSxVQUFuQixDQUE4QlgsT0FBT1MsT0FBckMsRUFBOENSLE9BQTlDO0FBQ0E7QUFDRixXQUFLLDZCQUFZVyxHQUFqQjtBQUNFQyxnQkFBUUMsR0FBUixDQUFZZCxPQUFPUyxPQUFuQjtBQUNBO0FBQ0YsV0FBSyw2QkFBWU0sSUFBakI7QUFDQTtBQUNFVCxhQUFLQyxhQUFMLENBQW1CUyxPQUFuQixDQUEyQmhCLE9BQU9TLE9BQWxDLEVBQTJDUixPQUEzQztBQUNBO0FBYko7QUFlRDs7QUFFRCxTQUFPZ0IsOEJBQVAsQ0FBc0NDLFVBQXRDLEVBQThGO0FBQzVGLFdBQU87QUFDTEMsWUFBTUQsV0FBV0U7QUFEWixLQUFQO0FBR0Q7QUF0QzZDLEM7a0JBQTNCN0IsMEIiLCJmaWxlIjoibWVzc2FnZS1ub3RpZmljYXRpb25zLWJyaWRnZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XHJcblxyXG5pbXBvcnQge0xhbmd1YWdlQ2xpZW50VjIsIE1lc3NhZ2VUeXBlfSBmcm9tICcuLi9wcm90b2NvbC9sYW5ndWFnZWNsaWVudC12Mic7XHJcbmltcG9ydCB0eXBlIHtTaG93TWVzc2FnZVBhcmFtcywgU2hvd01lc3NhZ2VSZXF1ZXN0UGFyYW1zLCBNZXNzYWdlQWN0aW9uSXRlbX0gZnJvbSAnLi4vcHJvdG9jb2wvbGFuZ3VhZ2VjbGllbnQtdjInO1xyXG5pbXBvcnQgQ29udmVydCBmcm9tICcuLi9jb252ZXJ0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lc3NhZ2VOb3RpZmljYXRpb25zQnJpZGdlIHtcclxuICBfbGM6IExhbmd1YWdlQ2xpZW50VjI7XHJcbiAgX25hbWU6IHN0cmluZztcclxuXHJcbiAgY29uc3RydWN0b3IobGFuZ3VhZ2VDbGllbnQ6IExhbmd1YWdlQ2xpZW50VjIsIG5hbWU6IHN0cmluZykge1xyXG4gICAgdGhpcy5fbGMgPSBsYW5ndWFnZUNsaWVudDtcclxuICAgIHRoaXMuX25hbWUgPSBuYW1lO1xyXG4gICAgdGhpcy5fbGMub25TaG93TWVzc2FnZSh0aGlzLm9uU2hvd01lc3NhZ2UuYmluZCh0aGlzKSk7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCk6IHZvaWQge1xyXG4gIH1cclxuXHJcbiAgLy8gVE9ETzogV2lyZSB1cCBvblNob3dNZXNzYWdlUmVxdWVzdFxyXG5cclxuICBvblNob3dNZXNzYWdlKHBhcmFtczogU2hvd01lc3NhZ2VQYXJhbXMpOiB2b2lkIHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7IGRpc21pc3NhYmxlOiB0cnVlLCBkZXRhaWw6IHRoaXMuX25hbWUgfTtcclxuICAgIHN3aXRjaChwYXJhbXMudHlwZSkge1xyXG4gICAgICBjYXNlIE1lc3NhZ2VUeXBlLkVycm9yOlxyXG4gICAgICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRFcnJvcihwYXJhbXMubWVzc2FnZSwgb3B0aW9ucyk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICBjYXNlIE1lc3NhZ2VUeXBlLldhcm5pbmc6XHJcbiAgICAgICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZFdhcm5pbmcocGFyYW1zLm1lc3NhZ2UsIG9wdGlvbnMpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgY2FzZSBNZXNzYWdlVHlwZS5Mb2c6XHJcbiAgICAgICAgY29uc29sZS5sb2cocGFyYW1zLm1lc3NhZ2UpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgY2FzZSBNZXNzYWdlVHlwZS5JbmZvOlxyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRJbmZvKHBhcmFtcy5tZXNzYWdlLCBvcHRpb25zKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYWN0aW9uSXRlbVRvTm90aWZpY2F0aW9uQnV0dG9uKGFjdGlvbkl0ZW06IE1lc3NhZ2VBY3Rpb25JdGVtKTogYXRvbSROb3RpZmljYXRpb25CdXR0b24ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdGV4dDogYWN0aW9uSXRlbS50aXRsZVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxudHlwZSBub3RpZmljYXRpb25GdW5jdGlvbiA9IChtZXNzYWdlOiBzdHJpbmcsIG9wdGlvbnM/OiBhdG9tJE5vdGlmaWNhdGlvbk9wdGlvbnMpID0+IGF0b20kTm90aWZpY2F0aW9uO1xyXG4iXX0=