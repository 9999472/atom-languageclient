Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _languageclientV = require('../protocol/languageclient-v2');

var _convert = require('../convert');

var _convert2 = _interopRequireDefault(_convert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let LinterBridge = class LinterBridge {

  constructor(languageClient) {
    this._diagnosticMap = new Map();

    this._lc = languageClient;
    this._lc.onPublishDiagnostics(this.captureDiagnostics.bind(this));
  }

  captureDiagnostics(params) {
    const path = _convert2.default.uriToPath(params.uri);
    this._diagnosticMap.set(params.uri, params.diagnostics.map(d => LinterBridge.diagnosticToMessage(path, d)));
  }

  provideDiagnostics() {
    let allResults = [];
    for (let fileResults of this._diagnosticMap.values()) allResults = allResults.concat(fileResults);
    return allResults;
  }

  static diagnosticToMessage(path, diagnostic) {
    return {
      filePath: path,
      text: diagnostic.message,
      range: _convert2.default.lsRangeToAtomRange(diagnostic.range),
      name: diagnostic.source,
      code: diagnostic.code,
      severity: LinterBridge.diagnosticSeverityToSeverity(diagnostic.severity || -1),
      type: LinterBridge.diagnosticSeverityToType(diagnostic.severity || -1)
    };
  }

  static diagnosticSeverityToType(severity) {
    switch (severity) {
      case _languageclientV.DiagnosticSeverity.Error:
        return 'Error';
      case _languageclientV.DiagnosticSeverity.Warning:
        return 'Warning';
      case _languageclientV.DiagnosticSeverity.Information:
        return 'Information';
      case _languageclientV.DiagnosticSeverity.Hint:
        return 'Hint';
      default:
        return '';
    };
  }

  static diagnosticSeverityToSeverity(severity) {
    switch (severity) {
      case _languageclientV.DiagnosticSeverity.Error:
        return 'error';
      case _languageclientV.DiagnosticSeverity.Warning:
        return 'warning';
      case _languageclientV.DiagnosticSeverity.Information:
      case _languageclientV.DiagnosticSeverity.Hint:
      default:
        return 'info';
    }
  }
};
exports.default = LinterBridge;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9icmlkZ2VzL2xpbnRlci1icmlkZ2UuanMiXSwibmFtZXMiOlsiTGludGVyQnJpZGdlIiwiY29uc3RydWN0b3IiLCJsYW5ndWFnZUNsaWVudCIsIl9kaWFnbm9zdGljTWFwIiwiTWFwIiwiX2xjIiwib25QdWJsaXNoRGlhZ25vc3RpY3MiLCJjYXB0dXJlRGlhZ25vc3RpY3MiLCJiaW5kIiwicGFyYW1zIiwicGF0aCIsInVyaVRvUGF0aCIsInVyaSIsInNldCIsImRpYWdub3N0aWNzIiwibWFwIiwiZCIsImRpYWdub3N0aWNUb01lc3NhZ2UiLCJwcm92aWRlRGlhZ25vc3RpY3MiLCJhbGxSZXN1bHRzIiwiZmlsZVJlc3VsdHMiLCJ2YWx1ZXMiLCJjb25jYXQiLCJkaWFnbm9zdGljIiwiZmlsZVBhdGgiLCJ0ZXh0IiwibWVzc2FnZSIsInJhbmdlIiwibHNSYW5nZVRvQXRvbVJhbmdlIiwibmFtZSIsInNvdXJjZSIsImNvZGUiLCJzZXZlcml0eSIsImRpYWdub3N0aWNTZXZlcml0eVRvU2V2ZXJpdHkiLCJ0eXBlIiwiZGlhZ25vc3RpY1NldmVyaXR5VG9UeXBlIiwiRXJyb3IiLCJXYXJuaW5nIiwiSW5mb3JtYXRpb24iLCJIaW50Il0sIm1hcHBpbmdzIjoiOzs7OztBQUVBOztBQUVBOzs7Ozs7SUFFcUJBLFksR0FBTixNQUFNQSxZQUFOLENBQW1COztBQUloQ0MsY0FBWUMsY0FBWixFQUE4QztBQUFBLFNBRjlDQyxjQUU4QyxHQUZPLElBQUlDLEdBQUosRUFFUDs7QUFDNUMsU0FBS0MsR0FBTCxHQUFXSCxjQUFYO0FBQ0EsU0FBS0csR0FBTCxDQUFTQyxvQkFBVCxDQUE4QixLQUFLQyxrQkFBTCxDQUF3QkMsSUFBeEIsQ0FBNkIsSUFBN0IsQ0FBOUI7QUFDRDs7QUFFREQscUJBQW1CRSxNQUFuQixFQUEyRDtBQUN6RCxVQUFNQyxPQUFPLGtCQUFRQyxTQUFSLENBQWtCRixPQUFPRyxHQUF6QixDQUFiO0FBQ0EsU0FBS1QsY0FBTCxDQUFvQlUsR0FBcEIsQ0FBd0JKLE9BQU9HLEdBQS9CLEVBQW9DSCxPQUFPSyxXQUFQLENBQW1CQyxHQUFuQixDQUF1QkMsS0FBS2hCLGFBQWFpQixtQkFBYixDQUFpQ1AsSUFBakMsRUFBdUNNLENBQXZDLENBQTVCLENBQXBDO0FBQ0Q7O0FBRURFLHVCQUE0QztBQUMxQyxRQUFJQyxhQUFvQyxFQUF4QztBQUNBLFNBQUssSUFBSUMsV0FBVCxJQUF3QixLQUFLakIsY0FBTCxDQUFvQmtCLE1BQXBCLEVBQXhCLEVBQ0VGLGFBQWFBLFdBQVdHLE1BQVgsQ0FBa0JGLFdBQWxCLENBQWI7QUFDRixXQUFPRCxVQUFQO0FBQ0Q7O0FBRUQsU0FBT0YsbUJBQVAsQ0FBMkJQLElBQTNCLEVBQXlDYSxVQUF6QyxFQUFpRjtBQUMvRSxXQUFPO0FBQ0xDLGdCQUFVZCxJQURMO0FBRUxlLFlBQU1GLFdBQVdHLE9BRlo7QUFHTEMsYUFBTyxrQkFBUUMsa0JBQVIsQ0FBMkJMLFdBQVdJLEtBQXRDLENBSEY7QUFJTEUsWUFBTU4sV0FBV08sTUFKWjtBQUtMQyxZQUFNUixXQUFXUSxJQUxaO0FBTUxDLGdCQUFVaEMsYUFBYWlDLDRCQUFiLENBQTBDVixXQUFXUyxRQUFYLElBQXVCLENBQUMsQ0FBbEUsQ0FOTDtBQU9MRSxZQUFNbEMsYUFBYW1DLHdCQUFiLENBQXNDWixXQUFXUyxRQUFYLElBQXVCLENBQUMsQ0FBOUQ7QUFQRCxLQUFQO0FBU0Q7O0FBRUQsU0FBT0csd0JBQVAsQ0FBZ0NILFFBQWhDLEVBQTBEO0FBQ3hELFlBQU9BLFFBQVA7QUFDRSxXQUFLLG9DQUFtQkksS0FBeEI7QUFDRSxlQUFPLE9BQVA7QUFDRixXQUFLLG9DQUFtQkMsT0FBeEI7QUFDRSxlQUFPLFNBQVA7QUFDRixXQUFLLG9DQUFtQkMsV0FBeEI7QUFDRSxlQUFPLGFBQVA7QUFDRixXQUFLLG9DQUFtQkMsSUFBeEI7QUFDRSxlQUFPLE1BQVA7QUFDRjtBQUNFLGVBQU8sRUFBUDtBQVZKLEtBV0M7QUFDRjs7QUFFRCxTQUFPTiw0QkFBUCxDQUFvQ0QsUUFBcEMsRUFBb0Y7QUFDbEYsWUFBT0EsUUFBUDtBQUNFLFdBQUssb0NBQW1CSSxLQUF4QjtBQUNFLGVBQU8sT0FBUDtBQUNGLFdBQUssb0NBQW1CQyxPQUF4QjtBQUNFLGVBQU8sU0FBUDtBQUNGLFdBQUssb0NBQW1CQyxXQUF4QjtBQUNBLFdBQUssb0NBQW1CQyxJQUF4QjtBQUNBO0FBQ0UsZUFBTyxNQUFQO0FBUko7QUFVRDtBQTNEK0IsQztrQkFBYnZDLFkiLCJmaWxlIjoibGludGVyLWJyaWRnZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XHJcblxyXG5pbXBvcnQge0xhbmd1YWdlQ2xpZW50VjIsIERpYWdub3N0aWNTZXZlcml0eX0gZnJvbSAnLi4vcHJvdG9jb2wvbGFuZ3VhZ2VjbGllbnQtdjInO1xyXG5pbXBvcnQgdHlwZSB7RGlhZ25vc3RpYywgUHVibGlzaERpYWdub3N0aWNzUGFyYW1zfSBmcm9tICcuLi9wcm90b2NvbC9sYW5ndWFnZWNsaWVudC12Mic7XHJcbmltcG9ydCBDb252ZXJ0IGZyb20gJy4uL2NvbnZlcnQnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGludGVyQnJpZGdlIHtcclxuICBfbGM6IExhbmd1YWdlQ2xpZW50VjI7XHJcbiAgX2RpYWdub3N0aWNNYXA6IE1hcDxzdHJpbmcsIEFycmF5PGxpbnRlciRNZXNzYWdlPj4gPSBuZXcgTWFwKCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGxhbmd1YWdlQ2xpZW50OiBMYW5ndWFnZUNsaWVudFYyKSB7XHJcbiAgICB0aGlzLl9sYyA9IGxhbmd1YWdlQ2xpZW50O1xyXG4gICAgdGhpcy5fbGMub25QdWJsaXNoRGlhZ25vc3RpY3ModGhpcy5jYXB0dXJlRGlhZ25vc3RpY3MuYmluZCh0aGlzKSk7XHJcbiAgfVxyXG5cclxuICBjYXB0dXJlRGlhZ25vc3RpY3MocGFyYW1zOiBQdWJsaXNoRGlhZ25vc3RpY3NQYXJhbXMpOiB2b2lkIHtcclxuICAgIGNvbnN0IHBhdGggPSBDb252ZXJ0LnVyaVRvUGF0aChwYXJhbXMudXJpKTtcclxuICAgIHRoaXMuX2RpYWdub3N0aWNNYXAuc2V0KHBhcmFtcy51cmksIHBhcmFtcy5kaWFnbm9zdGljcy5tYXAoZCA9PiBMaW50ZXJCcmlkZ2UuZGlhZ25vc3RpY1RvTWVzc2FnZShwYXRoLCBkKSkpO1xyXG4gIH1cclxuXHJcbiAgcHJvdmlkZURpYWdub3N0aWNzKCk6IEFycmF5PGxpbnRlciRNZXNzYWdlPiB7XHJcbiAgICBsZXQgYWxsUmVzdWx0czogQXJyYXk8bGludGVyJE1lc3NhZ2U+ID0gW107XHJcbiAgICBmb3IgKGxldCBmaWxlUmVzdWx0cyBvZiB0aGlzLl9kaWFnbm9zdGljTWFwLnZhbHVlcygpKVxyXG4gICAgICBhbGxSZXN1bHRzID0gYWxsUmVzdWx0cy5jb25jYXQoZmlsZVJlc3VsdHMpO1xyXG4gICAgcmV0dXJuIGFsbFJlc3VsdHM7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZGlhZ25vc3RpY1RvTWVzc2FnZShwYXRoOiBzdHJpbmcsIGRpYWdub3N0aWM6IERpYWdub3N0aWMpOiBsaW50ZXIkTWVzc2FnZSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBmaWxlUGF0aDogcGF0aCxcclxuICAgICAgdGV4dDogZGlhZ25vc3RpYy5tZXNzYWdlLFxyXG4gICAgICByYW5nZTogQ29udmVydC5sc1JhbmdlVG9BdG9tUmFuZ2UoZGlhZ25vc3RpYy5yYW5nZSksXHJcbiAgICAgIG5hbWU6IGRpYWdub3N0aWMuc291cmNlLFxyXG4gICAgICBjb2RlOiBkaWFnbm9zdGljLmNvZGUsXHJcbiAgICAgIHNldmVyaXR5OiBMaW50ZXJCcmlkZ2UuZGlhZ25vc3RpY1NldmVyaXR5VG9TZXZlcml0eShkaWFnbm9zdGljLnNldmVyaXR5IHx8IC0xKSxcclxuICAgICAgdHlwZTogTGludGVyQnJpZGdlLmRpYWdub3N0aWNTZXZlcml0eVRvVHlwZShkaWFnbm9zdGljLnNldmVyaXR5IHx8IC0xKSxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZGlhZ25vc3RpY1NldmVyaXR5VG9UeXBlKHNldmVyaXR5OiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgc3dpdGNoKHNldmVyaXR5KSB7XHJcbiAgICAgIGNhc2UgRGlhZ25vc3RpY1NldmVyaXR5LkVycm9yOlxyXG4gICAgICAgIHJldHVybiAnRXJyb3InO1xyXG4gICAgICBjYXNlIERpYWdub3N0aWNTZXZlcml0eS5XYXJuaW5nOlxyXG4gICAgICAgIHJldHVybiAnV2FybmluZyc7XHJcbiAgICAgIGNhc2UgRGlhZ25vc3RpY1NldmVyaXR5LkluZm9ybWF0aW9uOlxyXG4gICAgICAgIHJldHVybiAnSW5mb3JtYXRpb24nO1xyXG4gICAgICBjYXNlIERpYWdub3N0aWNTZXZlcml0eS5IaW50OlxyXG4gICAgICAgIHJldHVybiAnSGludCc7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkaWFnbm9zdGljU2V2ZXJpdHlUb1NldmVyaXR5KHNldmVyaXR5OiBudW1iZXIpOiAnZXJyb3InIHwgJ3dhcm5pbmcnIHwgJ2luZm8nIHtcclxuICAgIHN3aXRjaChzZXZlcml0eSkge1xyXG4gICAgICBjYXNlIERpYWdub3N0aWNTZXZlcml0eS5FcnJvcjpcclxuICAgICAgICByZXR1cm4gJ2Vycm9yJztcclxuICAgICAgY2FzZSBEaWFnbm9zdGljU2V2ZXJpdHkuV2FybmluZzpcclxuICAgICAgICByZXR1cm4gJ3dhcm5pbmcnO1xyXG4gICAgICBjYXNlIERpYWdub3N0aWNTZXZlcml0eS5JbmZvcm1hdGlvbjpcclxuICAgICAgY2FzZSBEaWFnbm9zdGljU2V2ZXJpdHkuSGludDpcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm4gJ2luZm8nO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=