Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _languageclientV = require('../protocol/languageclient-v2');

var _convert = require('../convert');

var _convert2 = _interopRequireDefault(_convert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let LinterBridge = class LinterBridge {

  constructor(languageClient) {
    this._diagnosticMap = new Map();

    this._lc = languageClient;
    languageClient.onPublishDiagnostics(this.captureDiagnostics.bind(this));
  }

  dispose() {}

  captureDiagnostics(params) {
    const path = _convert2.default.uriToPath(params.uri);
    this._diagnosticMap.set(params.uri, params.diagnostics.map(d => LinterBridge.diagnosticToMessage(path, d)));
  }

  provideDiagnostics() {
    let allResults = [];
    for (let fileResults of this._diagnosticMap.values()) allResults = allResults.concat(fileResults);
    return allResults;
  }

  static diagnosticToMessage(path, diagnostic) {
    return {
      filePath: path,
      text: diagnostic.message,
      range: _convert2.default.lsRangeToAtomRange(diagnostic.range),
      name: diagnostic.source,
      code: diagnostic.code,
      severity: LinterBridge.diagnosticSeverityToSeverity(diagnostic.severity || -1),
      type: LinterBridge.diagnosticSeverityToType(diagnostic.severity || -1)
    };
  }

  static diagnosticSeverityToType(severity) {
    switch (severity) {
      case _languageclientV.DiagnosticSeverity.Error:
        return 'Error';
      case _languageclientV.DiagnosticSeverity.Warning:
        return 'Warning';
      case _languageclientV.DiagnosticSeverity.Information:
        return 'Information';
      case _languageclientV.DiagnosticSeverity.Hint:
        return 'Hint';
      default:
        return '';
    };
  }

  static diagnosticSeverityToSeverity(severity) {
    switch (severity) {
      case _languageclientV.DiagnosticSeverity.Error:
        return 'error';
      case _languageclientV.DiagnosticSeverity.Warning:
        return 'warning';
      case _languageclientV.DiagnosticSeverity.Information:
      case _languageclientV.DiagnosticSeverity.Hint:
      default:
        return 'info';
    }
  }
};
exports.default = LinterBridge;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9icmlkZ2VzL2xpbnRlci1icmlkZ2UuanMiXSwibmFtZXMiOlsiTGludGVyQnJpZGdlIiwiY29uc3RydWN0b3IiLCJsYW5ndWFnZUNsaWVudCIsIl9kaWFnbm9zdGljTWFwIiwiTWFwIiwiX2xjIiwib25QdWJsaXNoRGlhZ25vc3RpY3MiLCJjYXB0dXJlRGlhZ25vc3RpY3MiLCJiaW5kIiwiZGlzcG9zZSIsInBhcmFtcyIsInBhdGgiLCJ1cmlUb1BhdGgiLCJ1cmkiLCJzZXQiLCJkaWFnbm9zdGljcyIsIm1hcCIsImQiLCJkaWFnbm9zdGljVG9NZXNzYWdlIiwicHJvdmlkZURpYWdub3N0aWNzIiwiYWxsUmVzdWx0cyIsImZpbGVSZXN1bHRzIiwidmFsdWVzIiwiY29uY2F0IiwiZGlhZ25vc3RpYyIsImZpbGVQYXRoIiwidGV4dCIsIm1lc3NhZ2UiLCJyYW5nZSIsImxzUmFuZ2VUb0F0b21SYW5nZSIsIm5hbWUiLCJzb3VyY2UiLCJjb2RlIiwic2V2ZXJpdHkiLCJkaWFnbm9zdGljU2V2ZXJpdHlUb1NldmVyaXR5IiwidHlwZSIsImRpYWdub3N0aWNTZXZlcml0eVRvVHlwZSIsIkVycm9yIiwiV2FybmluZyIsIkluZm9ybWF0aW9uIiwiSGludCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQTs7QUFFQTs7Ozs7O0lBRXFCQSxZLEdBQU4sTUFBTUEsWUFBTixDQUFtQjs7QUFJaENDLGNBQVlDLGNBQVosRUFBOEM7QUFBQSxTQUY5Q0MsY0FFOEMsR0FGTyxJQUFJQyxHQUFKLEVBRVA7O0FBQzVDLFNBQUtDLEdBQUwsR0FBV0gsY0FBWDtBQUNBQSxtQkFBZUksb0JBQWYsQ0FBb0MsS0FBS0Msa0JBQUwsQ0FBd0JDLElBQXhCLENBQTZCLElBQTdCLENBQXBDO0FBQ0Q7O0FBRURDLFlBQWdCLENBQ2Y7O0FBRURGLHFCQUFtQkcsTUFBbkIsRUFBMkQ7QUFDekQsVUFBTUMsT0FBTyxrQkFBUUMsU0FBUixDQUFrQkYsT0FBT0csR0FBekIsQ0FBYjtBQUNBLFNBQUtWLGNBQUwsQ0FBb0JXLEdBQXBCLENBQXdCSixPQUFPRyxHQUEvQixFQUFvQ0gsT0FBT0ssV0FBUCxDQUFtQkMsR0FBbkIsQ0FBdUJDLEtBQUtqQixhQUFha0IsbUJBQWIsQ0FBaUNQLElBQWpDLEVBQXVDTSxDQUF2QyxDQUE1QixDQUFwQztBQUNEOztBQUVERSx1QkFBNEM7QUFDMUMsUUFBSUMsYUFBb0MsRUFBeEM7QUFDQSxTQUFLLElBQUlDLFdBQVQsSUFBd0IsS0FBS2xCLGNBQUwsQ0FBb0JtQixNQUFwQixFQUF4QixFQUNFRixhQUFhQSxXQUFXRyxNQUFYLENBQWtCRixXQUFsQixDQUFiO0FBQ0YsV0FBT0QsVUFBUDtBQUNEOztBQUVELFNBQU9GLG1CQUFQLENBQTJCUCxJQUEzQixFQUF5Q2EsVUFBekMsRUFBaUY7QUFDL0UsV0FBTztBQUNMQyxnQkFBVWQsSUFETDtBQUVMZSxZQUFNRixXQUFXRyxPQUZaO0FBR0xDLGFBQU8sa0JBQVFDLGtCQUFSLENBQTJCTCxXQUFXSSxLQUF0QyxDQUhGO0FBSUxFLFlBQU1OLFdBQVdPLE1BSlo7QUFLTEMsWUFBTVIsV0FBV1EsSUFMWjtBQU1MQyxnQkFBVWpDLGFBQWFrQyw0QkFBYixDQUEwQ1YsV0FBV1MsUUFBWCxJQUF1QixDQUFDLENBQWxFLENBTkw7QUFPTEUsWUFBTW5DLGFBQWFvQyx3QkFBYixDQUFzQ1osV0FBV1MsUUFBWCxJQUF1QixDQUFDLENBQTlEO0FBUEQsS0FBUDtBQVNEOztBQUVELFNBQU9HLHdCQUFQLENBQWdDSCxRQUFoQyxFQUEwRDtBQUN4RCxZQUFPQSxRQUFQO0FBQ0UsV0FBSyxvQ0FBbUJJLEtBQXhCO0FBQ0UsZUFBTyxPQUFQO0FBQ0YsV0FBSyxvQ0FBbUJDLE9BQXhCO0FBQ0UsZUFBTyxTQUFQO0FBQ0YsV0FBSyxvQ0FBbUJDLFdBQXhCO0FBQ0UsZUFBTyxhQUFQO0FBQ0YsV0FBSyxvQ0FBbUJDLElBQXhCO0FBQ0UsZUFBTyxNQUFQO0FBQ0Y7QUFDRSxlQUFPLEVBQVA7QUFWSixLQVdDO0FBQ0Y7O0FBRUQsU0FBT04sNEJBQVAsQ0FBb0NELFFBQXBDLEVBQW9GO0FBQ2xGLFlBQU9BLFFBQVA7QUFDRSxXQUFLLG9DQUFtQkksS0FBeEI7QUFDRSxlQUFPLE9BQVA7QUFDRixXQUFLLG9DQUFtQkMsT0FBeEI7QUFDRSxlQUFPLFNBQVA7QUFDRixXQUFLLG9DQUFtQkMsV0FBeEI7QUFDQSxXQUFLLG9DQUFtQkMsSUFBeEI7QUFDQTtBQUNFLGVBQU8sTUFBUDtBQVJKO0FBVUQ7QUE5RCtCLEM7a0JBQWJ4QyxZIiwiZmlsZSI6ImxpbnRlci1icmlkZ2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xyXG5cclxuaW1wb3J0IHtMYW5ndWFnZUNsaWVudFYyLCBEaWFnbm9zdGljU2V2ZXJpdHl9IGZyb20gJy4uL3Byb3RvY29sL2xhbmd1YWdlY2xpZW50LXYyJztcclxuaW1wb3J0IHR5cGUge0RpYWdub3N0aWMsIFB1Ymxpc2hEaWFnbm9zdGljc1BhcmFtc30gZnJvbSAnLi4vcHJvdG9jb2wvbGFuZ3VhZ2VjbGllbnQtdjInO1xyXG5pbXBvcnQgQ29udmVydCBmcm9tICcuLi9jb252ZXJ0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpbnRlckJyaWRnZSB7XHJcbiAgX2xjOiBMYW5ndWFnZUNsaWVudFYyO1xyXG4gIF9kaWFnbm9zdGljTWFwOiBNYXA8c3RyaW5nLCBBcnJheTxsaW50ZXIkTWVzc2FnZT4+ID0gbmV3IE1hcCgpO1xyXG5cclxuICBjb25zdHJ1Y3RvcihsYW5ndWFnZUNsaWVudDogTGFuZ3VhZ2VDbGllbnRWMikge1xyXG4gICAgdGhpcy5fbGMgPSBsYW5ndWFnZUNsaWVudDtcclxuICAgIGxhbmd1YWdlQ2xpZW50Lm9uUHVibGlzaERpYWdub3N0aWNzKHRoaXMuY2FwdHVyZURpYWdub3N0aWNzLmJpbmQodGhpcykpO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpOiB2b2lkIHtcclxuICB9XHJcblxyXG4gIGNhcHR1cmVEaWFnbm9zdGljcyhwYXJhbXM6IFB1Ymxpc2hEaWFnbm9zdGljc1BhcmFtcyk6IHZvaWQge1xyXG4gICAgY29uc3QgcGF0aCA9IENvbnZlcnQudXJpVG9QYXRoKHBhcmFtcy51cmkpO1xyXG4gICAgdGhpcy5fZGlhZ25vc3RpY01hcC5zZXQocGFyYW1zLnVyaSwgcGFyYW1zLmRpYWdub3N0aWNzLm1hcChkID0+IExpbnRlckJyaWRnZS5kaWFnbm9zdGljVG9NZXNzYWdlKHBhdGgsIGQpKSk7XHJcbiAgfVxyXG5cclxuICBwcm92aWRlRGlhZ25vc3RpY3MoKTogQXJyYXk8bGludGVyJE1lc3NhZ2U+IHtcclxuICAgIGxldCBhbGxSZXN1bHRzOiBBcnJheTxsaW50ZXIkTWVzc2FnZT4gPSBbXTtcclxuICAgIGZvciAobGV0IGZpbGVSZXN1bHRzIG9mIHRoaXMuX2RpYWdub3N0aWNNYXAudmFsdWVzKCkpXHJcbiAgICAgIGFsbFJlc3VsdHMgPSBhbGxSZXN1bHRzLmNvbmNhdChmaWxlUmVzdWx0cyk7XHJcbiAgICByZXR1cm4gYWxsUmVzdWx0cztcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkaWFnbm9zdGljVG9NZXNzYWdlKHBhdGg6IHN0cmluZywgZGlhZ25vc3RpYzogRGlhZ25vc3RpYyk6IGxpbnRlciRNZXNzYWdlIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGZpbGVQYXRoOiBwYXRoLFxyXG4gICAgICB0ZXh0OiBkaWFnbm9zdGljLm1lc3NhZ2UsXHJcbiAgICAgIHJhbmdlOiBDb252ZXJ0LmxzUmFuZ2VUb0F0b21SYW5nZShkaWFnbm9zdGljLnJhbmdlKSxcclxuICAgICAgbmFtZTogZGlhZ25vc3RpYy5zb3VyY2UsXHJcbiAgICAgIGNvZGU6IGRpYWdub3N0aWMuY29kZSxcclxuICAgICAgc2V2ZXJpdHk6IExpbnRlckJyaWRnZS5kaWFnbm9zdGljU2V2ZXJpdHlUb1NldmVyaXR5KGRpYWdub3N0aWMuc2V2ZXJpdHkgfHwgLTEpLFxyXG4gICAgICB0eXBlOiBMaW50ZXJCcmlkZ2UuZGlhZ25vc3RpY1NldmVyaXR5VG9UeXBlKGRpYWdub3N0aWMuc2V2ZXJpdHkgfHwgLTEpLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkaWFnbm9zdGljU2V2ZXJpdHlUb1R5cGUoc2V2ZXJpdHk6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICBzd2l0Y2goc2V2ZXJpdHkpIHtcclxuICAgICAgY2FzZSBEaWFnbm9zdGljU2V2ZXJpdHkuRXJyb3I6XHJcbiAgICAgICAgcmV0dXJuICdFcnJvcic7XHJcbiAgICAgIGNhc2UgRGlhZ25vc3RpY1NldmVyaXR5Lldhcm5pbmc6XHJcbiAgICAgICAgcmV0dXJuICdXYXJuaW5nJztcclxuICAgICAgY2FzZSBEaWFnbm9zdGljU2V2ZXJpdHkuSW5mb3JtYXRpb246XHJcbiAgICAgICAgcmV0dXJuICdJbmZvcm1hdGlvbic7XHJcbiAgICAgIGNhc2UgRGlhZ25vc3RpY1NldmVyaXR5LkhpbnQ6XHJcbiAgICAgICAgcmV0dXJuICdIaW50JztcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGRpYWdub3N0aWNTZXZlcml0eVRvU2V2ZXJpdHkoc2V2ZXJpdHk6IG51bWJlcik6ICdlcnJvcicgfCAnd2FybmluZycgfCAnaW5mbycge1xyXG4gICAgc3dpdGNoKHNldmVyaXR5KSB7XHJcbiAgICAgIGNhc2UgRGlhZ25vc3RpY1NldmVyaXR5LkVycm9yOlxyXG4gICAgICAgIHJldHVybiAnZXJyb3InO1xyXG4gICAgICBjYXNlIERpYWdub3N0aWNTZXZlcml0eS5XYXJuaW5nOlxyXG4gICAgICAgIHJldHVybiAnd2FybmluZyc7XHJcbiAgICAgIGNhc2UgRGlhZ25vc3RpY1NldmVyaXR5LkluZm9ybWF0aW9uOlxyXG4gICAgICBjYXNlIERpYWdub3N0aWNTZXZlcml0eS5IaW50OlxyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHJldHVybiAnaW5mbyc7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==