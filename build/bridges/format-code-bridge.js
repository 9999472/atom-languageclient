Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _languageclientV = require('../protocol/languageclient-v2');

var _convert = require('../convert');

var _convert2 = _interopRequireDefault(_convert);

var _atom = require('atom');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

let FormatCodeBridge = class FormatCodeBridge {

  constructor(languageClient, canFormatSelection, canFormatFile) {
    this._disposable = new _atom.CompositeDisposable();
    this._lc = languageClient;
    if (canFormatSelection) {
      this._disposable.add(atom.commands.add('atom-text-editor', { 'language:format-selection': this.formatSelection.bind(this) }));
    };
    if (canFormatFile) {
      this._disposable.add(atom.commands.add('atom-text-editor', { 'language:format-file': this.formatDocument.bind(this) }));
    };
  }

  dispose() {
    this._disposable.dispose();
  }

  formatDocument() {
    var _this = this;

    return _asyncToGenerator(function* () {
      const editor = atom.workspace.getActiveTextEditor();
      if (editor == null) return;

      const result = yield _this._lc.documentFormatting({
        textDocument: _convert2.default.editorToTextDocumentIdentifier(editor),
        options: FormatCodeBridge.getFormatOptions(editor)
      });

      editor.getBuffer().transact(function () {
        return FormatCodeBridge.applyTextEdits(editor, result.reverse());
      });
    })();
  }

  formatSelection() {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      const editor = atom.workspace.getActiveTextEditor();
      if (editor == null) return;

      const result = yield _this2._lc.documentRangeFormatting({
        textDocument: _convert2.default.editorToTextDocumentIdentifier(editor),
        range: _convert2.default.atomRangeToLSRange(editor.getSelectedBufferRange()),
        options: FormatCodeBridge.getFormatOptions(editor)
      });

      editor.getBuffer().transact(function () {
        return FormatCodeBridge.applyTextEdits(editor, result.reverse());
      });
    })();
  }

  static applyTextEdits(editor, textEdits) {
    for (let textEdit of textEdits) {
      const atomRange = _convert2.default.lsRangeToAtomRange(textEdit.range);
      editor.setTextInBufferRange(atomRange, textEdit.newText);
    }
  }

  static getFormatOptions(editor) {
    return {
      tabSize: editor.getTabLength(),
      insertSpaces: editor.getSoftTabs()
    };
  }
};
exports.default = FormatCodeBridge;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9icmlkZ2VzL2Zvcm1hdC1jb2RlLWJyaWRnZS5qcyJdLCJuYW1lcyI6WyJGb3JtYXRDb2RlQnJpZGdlIiwiY29uc3RydWN0b3IiLCJsYW5ndWFnZUNsaWVudCIsImNhbkZvcm1hdFNlbGVjdGlvbiIsImNhbkZvcm1hdEZpbGUiLCJfZGlzcG9zYWJsZSIsIl9sYyIsImFkZCIsImF0b20iLCJjb21tYW5kcyIsImZvcm1hdFNlbGVjdGlvbiIsImJpbmQiLCJmb3JtYXREb2N1bWVudCIsImRpc3Bvc2UiLCJlZGl0b3IiLCJ3b3Jrc3BhY2UiLCJnZXRBY3RpdmVUZXh0RWRpdG9yIiwicmVzdWx0IiwiZG9jdW1lbnRGb3JtYXR0aW5nIiwidGV4dERvY3VtZW50IiwiZWRpdG9yVG9UZXh0RG9jdW1lbnRJZGVudGlmaWVyIiwib3B0aW9ucyIsImdldEZvcm1hdE9wdGlvbnMiLCJnZXRCdWZmZXIiLCJ0cmFuc2FjdCIsImFwcGx5VGV4dEVkaXRzIiwicmV2ZXJzZSIsImRvY3VtZW50UmFuZ2VGb3JtYXR0aW5nIiwicmFuZ2UiLCJhdG9tUmFuZ2VUb0xTUmFuZ2UiLCJnZXRTZWxlY3RlZEJ1ZmZlclJhbmdlIiwidGV4dEVkaXRzIiwidGV4dEVkaXQiLCJhdG9tUmFuZ2UiLCJsc1JhbmdlVG9BdG9tUmFuZ2UiLCJzZXRUZXh0SW5CdWZmZXJSYW5nZSIsIm5ld1RleHQiLCJ0YWJTaXplIiwiZ2V0VGFiTGVuZ3RoIiwiaW5zZXJ0U3BhY2VzIiwiZ2V0U29mdFRhYnMiXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUE7O0FBRUE7Ozs7QUFDQTs7Ozs7O0lBRXFCQSxnQixHQUFOLE1BQU1BLGdCQUFOLENBQXVCOztBQUlwQ0MsY0FBWUMsY0FBWixFQUE4Q0Msa0JBQTlDLEVBQTJFQyxhQUEzRSxFQUFtRztBQUNqRyxTQUFLQyxXQUFMLEdBQW1CLCtCQUFuQjtBQUNBLFNBQUtDLEdBQUwsR0FBV0osY0FBWDtBQUNBLFFBQUlDLGtCQUFKLEVBQXdCO0FBQ3RCLFdBQUtFLFdBQUwsQ0FBaUJFLEdBQWpCLENBQXFCQyxLQUFLQyxRQUFMLENBQWNGLEdBQWQsQ0FBa0Isa0JBQWxCLEVBQXNDLEVBQUMsNkJBQTZCLEtBQUtHLGVBQUwsQ0FBcUJDLElBQXJCLENBQTBCLElBQTFCLENBQTlCLEVBQXRDLENBQXJCO0FBQ0Q7QUFDRCxRQUFJUCxhQUFKLEVBQW1CO0FBQ2pCLFdBQUtDLFdBQUwsQ0FBaUJFLEdBQWpCLENBQXFCQyxLQUFLQyxRQUFMLENBQWNGLEdBQWQsQ0FBa0Isa0JBQWxCLEVBQXNDLEVBQUMsd0JBQXdCLEtBQUtLLGNBQUwsQ0FBb0JELElBQXBCLENBQXlCLElBQXpCLENBQXpCLEVBQXRDLENBQXJCO0FBQ0Q7QUFDRjs7QUFFREUsWUFBZ0I7QUFDZCxTQUFLUixXQUFMLENBQWlCUSxPQUFqQjtBQUNEOztBQUVLRCxnQkFBTixHQUFzQztBQUFBOztBQUFBO0FBQ3BDLFlBQU1FLFNBQVNOLEtBQUtPLFNBQUwsQ0FBZUMsbUJBQWYsRUFBZjtBQUNBLFVBQUlGLFVBQVUsSUFBZCxFQUFvQjs7QUFFcEIsWUFBTUcsU0FBUyxNQUFNLE1BQUtYLEdBQUwsQ0FBU1ksa0JBQVQsQ0FBNEI7QUFDL0NDLHNCQUFjLGtCQUFRQyw4QkFBUixDQUF1Q04sTUFBdkMsQ0FEaUM7QUFFL0NPLGlCQUFTckIsaUJBQWlCc0IsZ0JBQWpCLENBQWtDUixNQUFsQztBQUZzQyxPQUE1QixDQUFyQjs7QUFLQUEsYUFBT1MsU0FBUCxHQUFtQkMsUUFBbkIsQ0FBNEI7QUFBQSxlQUFNeEIsaUJBQWlCeUIsY0FBakIsQ0FBZ0NYLE1BQWhDLEVBQXdDRyxPQUFPUyxPQUFQLEVBQXhDLENBQU47QUFBQSxPQUE1QjtBQVRvQztBQVVyQzs7QUFFS2hCLGlCQUFOLEdBQXVDO0FBQUE7O0FBQUE7QUFDckMsWUFBTUksU0FBU04sS0FBS08sU0FBTCxDQUFlQyxtQkFBZixFQUFmO0FBQ0EsVUFBSUYsVUFBVSxJQUFkLEVBQW9COztBQUVwQixZQUFNRyxTQUFTLE1BQU0sT0FBS1gsR0FBTCxDQUFTcUIsdUJBQVQsQ0FBaUM7QUFDcERSLHNCQUFjLGtCQUFRQyw4QkFBUixDQUF1Q04sTUFBdkMsQ0FEc0M7QUFFcERjLGVBQU8sa0JBQVFDLGtCQUFSLENBQTJCZixPQUFPZ0Isc0JBQVAsRUFBM0IsQ0FGNkM7QUFHcERULGlCQUFTckIsaUJBQWlCc0IsZ0JBQWpCLENBQWtDUixNQUFsQztBQUgyQyxPQUFqQyxDQUFyQjs7QUFNQUEsYUFBT1MsU0FBUCxHQUFtQkMsUUFBbkIsQ0FBNEI7QUFBQSxlQUFNeEIsaUJBQWlCeUIsY0FBakIsQ0FBZ0NYLE1BQWhDLEVBQXdDRyxPQUFPUyxPQUFQLEVBQXhDLENBQU47QUFBQSxPQUE1QjtBQVZxQztBQVd0Qzs7QUFFRCxTQUFPRCxjQUFQLENBQXNCWCxNQUF0QixFQUErQ2lCLFNBQS9DLEVBQWlGO0FBQy9FLFNBQUssSUFBSUMsUUFBVCxJQUFxQkQsU0FBckIsRUFBZ0M7QUFDOUIsWUFBTUUsWUFBWSxrQkFBUUMsa0JBQVIsQ0FBMkJGLFNBQVNKLEtBQXBDLENBQWxCO0FBQ0FkLGFBQU9xQixvQkFBUCxDQUE0QkYsU0FBNUIsRUFBdUNELFNBQVNJLE9BQWhEO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPZCxnQkFBUCxDQUF3QlIsTUFBeEIsRUFBb0U7QUFDbEUsV0FBTztBQUNMdUIsZUFBU3ZCLE9BQU93QixZQUFQLEVBREo7QUFFTEMsb0JBQWN6QixPQUFPMEIsV0FBUDtBQUZULEtBQVA7QUFJRDtBQXhEbUMsQztrQkFBakJ4QyxnQiIsImZpbGUiOiJmb3JtYXQtY29kZS1icmlkZ2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xyXG5cclxuaW1wb3J0IHtMYW5ndWFnZUNsaWVudFYyfSBmcm9tICcuLi9wcm90b2NvbC9sYW5ndWFnZWNsaWVudC12Mic7XHJcbmltcG9ydCB0eXBlIHtGb3JtYXR0aW5nT3B0aW9ucywgVGV4dEVkaXR9IGZyb20gJy4uL3Byb3RvY29sL2xhbmd1YWdlY2xpZW50LXYyJztcclxuaW1wb3J0IENvbnZlcnQgZnJvbSAnLi4vY29udmVydCc7XHJcbmltcG9ydCB7Q29tcG9zaXRlRGlzcG9zYWJsZX0gZnJvbSAnYXRvbSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtYXRDb2RlQnJpZGdlIHtcclxuICBfZGlzcG9zYWJsZTogQ29tcG9zaXRlRGlzcG9zYWJsZTtcclxuICBfbGM6IExhbmd1YWdlQ2xpZW50VjI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGxhbmd1YWdlQ2xpZW50OiBMYW5ndWFnZUNsaWVudFYyLCBjYW5Gb3JtYXRTZWxlY3Rpb246IGJvb2xlYW4sIGNhbkZvcm1hdEZpbGU6IGJvb2xlYW4pIHtcclxuICAgIHRoaXMuX2Rpc3Bvc2FibGUgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpO1xyXG4gICAgdGhpcy5fbGMgPSBsYW5ndWFnZUNsaWVudDtcclxuICAgIGlmIChjYW5Gb3JtYXRTZWxlY3Rpb24pIHtcclxuICAgICAgdGhpcy5fZGlzcG9zYWJsZS5hZGQoYXRvbS5jb21tYW5kcy5hZGQoJ2F0b20tdGV4dC1lZGl0b3InLCB7J2xhbmd1YWdlOmZvcm1hdC1zZWxlY3Rpb24nOiB0aGlzLmZvcm1hdFNlbGVjdGlvbi5iaW5kKHRoaXMpfSkpO1xyXG4gICAgfTtcclxuICAgIGlmIChjYW5Gb3JtYXRGaWxlKSB7XHJcbiAgICAgIHRoaXMuX2Rpc3Bvc2FibGUuYWRkKGF0b20uY29tbWFuZHMuYWRkKCdhdG9tLXRleHQtZWRpdG9yJywgeydsYW5ndWFnZTpmb3JtYXQtZmlsZSc6IHRoaXMuZm9ybWF0RG9jdW1lbnQuYmluZCh0aGlzKX0pKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5fZGlzcG9zYWJsZS5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBmb3JtYXREb2N1bWVudCgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGNvbnN0IGVkaXRvciA9IGF0b20ud29ya3NwYWNlLmdldEFjdGl2ZVRleHRFZGl0b3IoKTtcclxuICAgIGlmIChlZGl0b3IgPT0gbnVsbCkgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX2xjLmRvY3VtZW50Rm9ybWF0dGluZyh7XHJcbiAgICAgIHRleHREb2N1bWVudDogQ29udmVydC5lZGl0b3JUb1RleHREb2N1bWVudElkZW50aWZpZXIoZWRpdG9yKSxcclxuICAgICAgb3B0aW9uczogRm9ybWF0Q29kZUJyaWRnZS5nZXRGb3JtYXRPcHRpb25zKGVkaXRvcilcclxuICAgIH0pO1xyXG5cclxuICAgIGVkaXRvci5nZXRCdWZmZXIoKS50cmFuc2FjdCgoKSA9PiBGb3JtYXRDb2RlQnJpZGdlLmFwcGx5VGV4dEVkaXRzKGVkaXRvciwgcmVzdWx0LnJldmVyc2UoKSkpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZm9ybWF0U2VsZWN0aW9uKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgY29uc3QgZWRpdG9yID0gYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlVGV4dEVkaXRvcigpO1xyXG4gICAgaWYgKGVkaXRvciA9PSBudWxsKSByZXR1cm47XHJcblxyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5fbGMuZG9jdW1lbnRSYW5nZUZvcm1hdHRpbmcoe1xyXG4gICAgICB0ZXh0RG9jdW1lbnQ6IENvbnZlcnQuZWRpdG9yVG9UZXh0RG9jdW1lbnRJZGVudGlmaWVyKGVkaXRvciksXHJcbiAgICAgIHJhbmdlOiBDb252ZXJ0LmF0b21SYW5nZVRvTFNSYW5nZShlZGl0b3IuZ2V0U2VsZWN0ZWRCdWZmZXJSYW5nZSgpKSxcclxuICAgICAgb3B0aW9uczogRm9ybWF0Q29kZUJyaWRnZS5nZXRGb3JtYXRPcHRpb25zKGVkaXRvcilcclxuICAgIH0pO1xyXG5cclxuICAgIGVkaXRvci5nZXRCdWZmZXIoKS50cmFuc2FjdCgoKSA9PiBGb3JtYXRDb2RlQnJpZGdlLmFwcGx5VGV4dEVkaXRzKGVkaXRvciwgcmVzdWx0LnJldmVyc2UoKSkpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGFwcGx5VGV4dEVkaXRzKGVkaXRvcjogYXRvbSRUZXh0RWRpdG9yLCB0ZXh0RWRpdHM6IEFycmF5PFRleHRFZGl0Pik6IHZvaWQge1xyXG4gICAgZm9yIChsZXQgdGV4dEVkaXQgb2YgdGV4dEVkaXRzKSB7XHJcbiAgICAgIGNvbnN0IGF0b21SYW5nZSA9IENvbnZlcnQubHNSYW5nZVRvQXRvbVJhbmdlKHRleHRFZGl0LnJhbmdlKTtcclxuICAgICAgZWRpdG9yLnNldFRleHRJbkJ1ZmZlclJhbmdlKGF0b21SYW5nZSwgdGV4dEVkaXQubmV3VGV4dCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0Rm9ybWF0T3B0aW9ucyhlZGl0b3I6IGF0b20kVGV4dEVkaXRvcik6IEZvcm1hdHRpbmdPcHRpb25zIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHRhYlNpemU6IGVkaXRvci5nZXRUYWJMZW5ndGgoKSxcclxuICAgICAgaW5zZXJ0U3BhY2VzOiBlZGl0b3IuZ2V0U29mdFRhYnMoKVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=