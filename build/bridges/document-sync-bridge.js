Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _languageclientV = require('../protocol/languageclient-v2');

var ls = _interopRequireWildcard(_languageclientV);

var _convert = require('../convert');

var _convert2 = _interopRequireDefault(_convert);

var _atom = require('atom');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

let DocumentSyncBridge = class DocumentSyncBridge {

  constructor(languageClient, documentSyncKind) {
    this._editors = new WeakMap();

    this._disposable = new _atom.CompositeDisposable();
    this._lc = languageClient;
    this._documentSyncKind = documentSyncKind;
    this._disposable.add(atom.textEditors.observe(this._observeTextEditors.bind(this)));
  }

  dispose() {
    this._disposable.dispose();
  }

  _observeTextEditors(editor) {
    if (!this._editors.has(editor)) {
      const sync = new TextEditorSyncBridge(editor, this._lc, this._documentSyncKind);
      this._editors.set(editor, sync);
      this._disposable.add(sync);
      this._disposable.add(editor.onDidDestroy(() => {
        this._editors.delete(editor);
        this._disposable.remove(sync);
        sync.dispose();
      }));
    }
  }
};
exports.default = DocumentSyncBridge;
let TextEditorSyncBridge = class TextEditorSyncBridge {

  constructor(editor, languageClient, documentSyncKind) {
    this._disposable = new _atom.CompositeDisposable();
    this._version = 1;

    this._editor = editor;
    this._lc = languageClient;

    const changeTracking = this._setupChangeTracking(documentSyncKind);
    if (changeTracking != null) {
      this._disposable.add(changeTracking);
    }

    this._disposable.add(editor.onDidSave(this._didSave.bind(this)), editor.onDidDestroy(this._didDestroy.bind(this)));

    this._didOpen();
  }

  _setupChangeTracking(documentSyncKind) {
    switch (documentSyncKind) {
      case ls.TextDocumentSyncKind.Full:
        return this._editor.onDidChange(this._editorChangeSendFull.bind(this));
      case ls.TextDocumentSyncKind.Incremental:
        return this._editor.getBuffer().onDidChangeText(this._bufferChangeSendIncrement.bind(this));
    }
    return null;
  }

  dispose() {
    this._disposable.dispose();
  }

  _getLanguageId() {
    return this._editor.getGrammar().name;
  }

  _getVersionedTextDocumentIdentifier() {
    return {
      uri: this._getEditorUri(),
      version: this._version
    };
  }

  _didOpen() {
    this._lc.didOpenTextDocument({
      textDocument: {
        uri: this._getEditorUri(),
        languageId: this._getLanguageId().toLowerCase(),
        version: this._version,
        text: this._editor.getText()
      }
    });
  }

  _editorChangeSendFull() {
    this._version++;
    this._lc.didChangeTextDocument({
      textDocument: this._getVersionedTextDocumentIdentifier(),
      contentChanges: [{ text: this._editor.getText() }]
    });
  }

  _bufferChangeSendIncrement(event) {
    this._version++;
    this._lc.didChangeTextDocument({
      textDocument: this._getVersionedTextDocumentIdentifier(),
      contentChanges: event.changes.map(TextEditorSyncBridge._changeTextToContentChange)
    });
  }

  static _changeTextToContentChange(change) {
    const start = _convert2.default.pointToPosition(change.start);
    const end = { line: change.start.row + change.oldExtent.row, character: change.start.column + change.oldExtent.column };

    return {
      range: {
        start: start,
        end: end
      },
      rangeLength: change.oldExtent.column - change.newExtent.column + change.newText.length, // TODO: Only works if row is the same...
      text: change.newText
    };
  }

  _didDestroy() {
    this._lc.didCloseTextDocument({
      textDocument: {
        uri: this._getEditorUri()
      }
    });
  }

  _didSave() {
    this._lc.didSaveTextDocument({ textDocument: { uri: this._getEditorUri() } });
    this._lc.didChangeWatchedFiles({ changes: [{ uri: this._getEditorUri(), type: ls.FileChangeType.Changed }] });
  }

  _getEditorUri() {
    return _convert2.default.pathToUri(this._editor.getURI() || '');
  }
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,