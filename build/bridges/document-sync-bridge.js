Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _languageclientV = require('../protocol/languageclient-v2');

var _convert = require('../convert');

var _convert2 = _interopRequireDefault(_convert);

var _atom = require('atom');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let DocumentSyncBridge = class DocumentSyncBridge {

  constructor(languageClient, documentSyncKind) {
    this._disposable = new _atom.CompositeDisposable();
    this._editors = new WeakMap();

    this._lc = languageClient;
    this._documentSyncKind = documentSyncKind;
    this._disposable.add(atom.textEditors.observe(this.observeTextEditors.bind(this)));
  }

  dispose() {
    this._disposable.dispose();
  }

  observeTextEditors(editor) {
    if (!this._editors.has(editor)) {
      const sync = new TextEditorSyncBridge(editor, this._lc, this._documentSyncKind);
      this._editors.set(editor, sync);
      this._disposable.add(sync);
      this._disposable.add(editor.onDidDestroy(() => {
        this._editors.delete(editor);
        this._disposable.remove(sync);
        sync.dispose();
      }));
    }
  }
};
exports.default = DocumentSyncBridge;
let TextEditorSyncBridge = class TextEditorSyncBridge {

  constructor(editor, languageClient, documentSyncKind) {
    this._disposable = new _atom.CompositeDisposable();
    this._version = 1;

    this._editor = editor;
    this._lc = languageClient;

    const changeTracking = this.setupChangeTracking(documentSyncKind);
    if (changeTracking != null) {
      this._disposable.add(changeTracking);
    }

    this._disposable.add(editor.onDidSave(this.didSave.bind(this)), editor.onDidDestroy(this.didDestroy.bind(this)));

    this.didOpen();
  }

  setupChangeTracking(documentSyncKind) {
    switch (documentSyncKind) {
      case _languageclientV.TextDocumentSyncKind.Full:
        return this._editor.onDidChange(this.editorChangeSendFull.bind(this));
      case _languageclientV.TextDocumentSyncKind.Incremental:
        return this._editor.getBuffer().onDidChangeText(this.bufferChangeSendIncrement.bind(this));
    }
    return null;
  }

  dispose() {
    this._disposable.dispose();
  }

  getLanguageId() {
    return this._editor.getGrammar().name;
  }

  getVersionedTextDocumentIdentifier() {
    return {
      uri: this.getEditorUri(),
      version: this._version
    };
  }

  didOpen() {
    this._lc.didOpenTextDocument({
      textDocument: {
        uri: this.getEditorUri(),
        languageId: this.getLanguageId().toLowerCase(),
        version: this._version,
        text: this._editor.getText()
      }
    });
  }

  editorChangeSendFull() {
    this._version++;
    this._lc.didChangeTextDocument({
      textDocument: this.getVersionedTextDocumentIdentifier(),
      contentChanges: [{ text: this._editor.getText() }]
    });
  }

  bufferChangeSendIncrement(event) {
    this._version++;
    this._lc.didChangeTextDocument({
      textDocument: this.getVersionedTextDocumentIdentifier(),
      contentChanges: event.changes.map(TextEditorSyncBridge.changeTextToContentChange)
    });
  }

  static changeTextToContentChange(change) {
    const start = _convert2.default.pointToPosition(change.start);
    const end = { line: change.start.row + change.oldExtent.row, character: change.start.column + change.oldExtent.column };

    return {
      range: { start: start, end: end },
      rangeLength: change.oldExtent.column - change.newExtent.column + change.newText.length, // TODO: Only works if row is the same...
      text: change.newText
    };
  }

  didDestroy() {
    this._lc.didCloseTextDocument({ textDocument: { uri: this.getEditorUri() } });
  }

  didSave() {
    this._lc.didSaveTextDocument({ textDocument: { uri: this.getEditorUri() } });
    this._lc.didChangeWatchedFiles({ changes: [{ uri: this.getEditorUri(), type: _languageclientV.FileChangeType.Changed }] });
  }

  getEditorUri() {
    return _convert2.default.pathToUri(this._editor.getURI() || '');
  }
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,