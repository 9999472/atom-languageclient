Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _languageclientV = require('../protocol/languageclient-v2');

var _convert = require('../convert');

var _convert2 = _interopRequireDefault(_convert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

let AutocompleteBridge = class AutocompleteBridge {

  constructor(languageClient) {
    this._lc = languageClient;
  }

  getSuggestions(request) {
    var _this = this;

    return _asyncToGenerator(function* () {
      const completionItems = yield _this._lc.completion({
        textDocument: _convert2.default.editorToTextDocumentIdentifier(request.editor),
        position: _convert2.default.pointToPosition(request.bufferPosition)
      });
      return AutocompleteBridge.completionItemsToSuggestions(completionItems, request);
    })();
  }

  static completionItemsToSuggestions(completionItems, request) {
    return (Array.isArray(completionItems) ? completionItems : completionItems.items || []).map(s => AutocompleteBridge.completionItemToSuggestion(s, request));
  }

  static completionItemToSuggestion(item, request) {
    let suggestion = {
      text: item.insertText || item.label,
      displayText: item.label,
      filterText: item.filterText || item.label,
      type: AutocompleteBridge.completionKindToSuggestionType(item.kind),
      description: item.detail,
      descriptionMoreURL: item.documentation
    };

    if (item.textEdit) {
      const { range, newText } = item.textEdit;
      suggestion.replacementPrefix = request.editor.getTextInBufferRange(_convert2.default.lsRangeToAtomRange(range));
      suggestion.text = newText;
    }

    // TODO: Snippets
    return suggestion;
  }

  static completionKindToSuggestionType(kind) {
    switch (kind) {
      case _languageclientV.CompletionItemKind.Method:
        return 'method';
      case _languageclientV.CompletionItemKind.Function:
      case _languageclientV.CompletionItemKind.Constructor:
        return 'function';
      case _languageclientV.CompletionItemKind.Field:
      case _languageclientV.CompletionItemKind.Property:
        return 'property';
      case _languageclientV.CompletionItemKind.Variable:
        return 'variable';
      case _languageclientV.CompletionItemKind.Class:
        return 'class';
      case _languageclientV.CompletionItemKind.Interface:
        return 'interface';
      case _languageclientV.CompletionItemKind.Module:
        return 'module';
      case _languageclientV.CompletionItemKind.Unit:
        return 'builtin';
      case _languageclientV.CompletionItemKind.Enum:
        return 'enum';
      case _languageclientV.CompletionItemKind.Keyword:
        return 'keyword';
      case _languageclientV.CompletionItemKind.Snippet:
        return 'snippet';
      case _languageclientV.CompletionItemKind.File:
        return 'import';
      case _languageclientV.CompletionItemKind.Reference:
        return 'require';
      default:
        return 'value';
    }
  }
};
exports.default = AutocompleteBridge;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9icmlkZ2VzL2F1dG9jb21wbGV0ZS1icmlkZ2UuanMiXSwibmFtZXMiOlsiQXV0b2NvbXBsZXRlQnJpZGdlIiwiY29uc3RydWN0b3IiLCJsYW5ndWFnZUNsaWVudCIsIl9sYyIsImdldFN1Z2dlc3Rpb25zIiwicmVxdWVzdCIsImNvbXBsZXRpb25JdGVtcyIsImNvbXBsZXRpb24iLCJ0ZXh0RG9jdW1lbnQiLCJlZGl0b3JUb1RleHREb2N1bWVudElkZW50aWZpZXIiLCJlZGl0b3IiLCJwb3NpdGlvbiIsInBvaW50VG9Qb3NpdGlvbiIsImJ1ZmZlclBvc2l0aW9uIiwiY29tcGxldGlvbkl0ZW1zVG9TdWdnZXN0aW9ucyIsIkFycmF5IiwiaXNBcnJheSIsIml0ZW1zIiwibWFwIiwicyIsImNvbXBsZXRpb25JdGVtVG9TdWdnZXN0aW9uIiwiaXRlbSIsInN1Z2dlc3Rpb24iLCJ0ZXh0IiwiaW5zZXJ0VGV4dCIsImxhYmVsIiwiZGlzcGxheVRleHQiLCJmaWx0ZXJUZXh0IiwidHlwZSIsImNvbXBsZXRpb25LaW5kVG9TdWdnZXN0aW9uVHlwZSIsImtpbmQiLCJkZXNjcmlwdGlvbiIsImRldGFpbCIsImRlc2NyaXB0aW9uTW9yZVVSTCIsImRvY3VtZW50YXRpb24iLCJ0ZXh0RWRpdCIsInJhbmdlIiwibmV3VGV4dCIsInJlcGxhY2VtZW50UHJlZml4IiwiZ2V0VGV4dEluQnVmZmVyUmFuZ2UiLCJsc1JhbmdlVG9BdG9tUmFuZ2UiLCJNZXRob2QiLCJGdW5jdGlvbiIsIkNvbnN0cnVjdG9yIiwiRmllbGQiLCJQcm9wZXJ0eSIsIlZhcmlhYmxlIiwiQ2xhc3MiLCJJbnRlcmZhY2UiLCJNb2R1bGUiLCJVbml0IiwiRW51bSIsIktleXdvcmQiLCJTbmlwcGV0IiwiRmlsZSIsIlJlZmVyZW5jZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQTs7QUFFQTs7Ozs7Ozs7SUFFcUJBLGtCLEdBQU4sTUFBTUEsa0JBQU4sQ0FBeUI7O0FBR3RDQyxjQUFZQyxjQUFa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bXBvcnQge0xhbmd1YWdlQ2xpZW50VjIsIENvbXBsZXRpb25JdGVtS2luZH0gZnJvbSAnLi4vcHJvdG9jb2wvbGFuZ3VhZ2VjbGllbnQtdjInO1xyXG5pbXBvcnQgdHlwZSB7Q29tcGxldGlvbkl0ZW0sIENvbXBsZXRpb25MaXN0fSBmcm9tICcuLi9wcm90b2NvbC9sYW5ndWFnZWNsaWVudC12Mic7XHJcbmltcG9ydCBDb252ZXJ0IGZyb20gJy4uL2NvbnZlcnQnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXV0b2NvbXBsZXRlQnJpZGdlIHtcclxuICBfbGM6IExhbmd1YWdlQ2xpZW50VjI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGxhbmd1YWdlQ2xpZW50OiBMYW5ndWFnZUNsaWVudFYyKSB7XHJcbiAgICB0aGlzLl9sYyA9IGxhbmd1YWdlQ2xpZW50O1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2V0U3VnZ2VzdGlvbnMocmVxdWVzdDogYXRvbSRBdXRvY29tcGxldGVSZXF1ZXN0KTogUHJvbWlzZTxBcnJheTxhdG9tJEF1dG9jb21wbGV0ZVN1Z2dlc3Rpb24+PiB7XHJcbiAgICBjb25zdCBjb21wbGV0aW9uSXRlbXMgPSBhd2FpdCB0aGlzLl9sYy5jb21wbGV0aW9uKHtcclxuICAgICAgdGV4dERvY3VtZW50OiBDb252ZXJ0LmVkaXRvclRvVGV4dERvY3VtZW50SWRlbnRpZmllcihyZXF1ZXN0LmVkaXRvciksXHJcbiAgICAgIHBvc2l0aW9uOiBDb252ZXJ0LnBvaW50VG9Qb3NpdGlvbihyZXF1ZXN0LmJ1ZmZlclBvc2l0aW9uKVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gQXV0b2NvbXBsZXRlQnJpZGdlLmNvbXBsZXRpb25JdGVtc1RvU3VnZ2VzdGlvbnMoY29tcGxldGlvbkl0ZW1zLCByZXF1ZXN0KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjb21wbGV0aW9uSXRlbXNUb1N1Z2dlc3Rpb25zKGNvbXBsZXRpb25JdGVtczogQXJyYXk8Q29tcGxldGlvbkl0ZW0+IHwgQ29tcGxldGlvbkxpc3QsIHJlcXVlc3Q6IGF0b20kQXV0b2NvbXBsZXRlUmVxdWVzdCk6IEFycmF5PGF0b20kQXV0b2NvbXBsZXRlU3VnZ2VzdGlvbj4ge1xyXG4gICAgcmV0dXJuIChBcnJheS5pc0FycmF5KGNvbXBsZXRpb25JdGVtcykgPyBjb21wbGV0aW9uSXRlbXMgOiBjb21wbGV0aW9uSXRlbXMuaXRlbXMgfHwgW10pXHJcbiAgICAgIC5tYXAocyA9PiBBdXRvY29tcGxldGVCcmlkZ2UuY29tcGxldGlvbkl0ZW1Ub1N1Z2dlc3Rpb24ocywgcmVxdWVzdCkpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNvbXBsZXRpb25JdGVtVG9TdWdnZXN0aW9uKGl0ZW06IENvbXBsZXRpb25JdGVtLCByZXF1ZXN0OiBhdG9tJEF1dG9jb21wbGV0ZVJlcXVlc3QpOiBhdG9tJEF1dG9jb21wbGV0ZVN1Z2dlc3Rpb24ge1xyXG4gICAgbGV0IHN1Z2dlc3Rpb246IGF0b20kQXV0b2NvbXBsZXRlU3VnZ2VzdGlvbiA9IHtcclxuICAgICAgdGV4dDogaXRlbS5pbnNlcnRUZXh0IHx8IGl0ZW0ubGFiZWwsXHJcbiAgICAgIGRpc3BsYXlUZXh0OiBpdGVtLmxhYmVsLFxyXG4gICAgICBmaWx0ZXJUZXh0OiBpdGVtLmZpbHRlclRleHQgfHwgaXRlbS5sYWJlbCxcclxuICAgICAgdHlwZTogQXV0b2NvbXBsZXRlQnJpZGdlLmNvbXBsZXRpb25LaW5kVG9TdWdnZXN0aW9uVHlwZShpdGVtLmtpbmQpLFxyXG4gICAgICBkZXNjcmlwdGlvbjogaXRlbS5kZXRhaWwsXHJcbiAgICAgIGRlc2NyaXB0aW9uTW9yZVVSTDogaXRlbS5kb2N1bWVudGF0aW9uLFxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoaXRlbS50ZXh0RWRpdCkge1xyXG4gICAgICBjb25zdCB7cmFuZ2UsIG5ld1RleHR9ID0gaXRlbS50ZXh0RWRpdDtcclxuICAgICAgc3VnZ2VzdGlvbi5yZXBsYWNlbWVudFByZWZpeCA9IHJlcXVlc3QuZWRpdG9yLmdldFRleHRJbkJ1ZmZlclJhbmdlKENvbnZlcnQubHNSYW5nZVRvQXRvbVJhbmdlKHJhbmdlKSk7XHJcbiAgICAgIHN1Z2dlc3Rpb24udGV4dCA9IG5ld1RleHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVE9ETzogU25pcHBldHNcclxuICAgIHJldHVybiBzdWdnZXN0aW9uO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNvbXBsZXRpb25LaW5kVG9TdWdnZXN0aW9uVHlwZShraW5kOiA/bnVtYmVyKTogc3RyaW5nIHtcclxuICAgIHN3aXRjaChraW5kKSB7XHJcbiAgICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLk1ldGhvZDpcclxuICAgICAgICByZXR1cm4gJ21ldGhvZCc7XHJcbiAgICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLkZ1bmN0aW9uOlxyXG4gICAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5Db25zdHJ1Y3RvcjpcclxuICAgICAgICByZXR1cm4gJ2Z1bmN0aW9uJztcclxuICAgICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuRmllbGQ6XHJcbiAgICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLlByb3BlcnR5OlxyXG4gICAgICAgIHJldHVybiAncHJvcGVydHknO1xyXG4gICAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5WYXJpYWJsZTpcclxuICAgICAgICByZXR1cm4gJ3ZhcmlhYmxlJztcclxuICAgICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuQ2xhc3M6XHJcbiAgICAgICAgcmV0dXJuICdjbGFzcyc7XHJcbiAgICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLkludGVyZmFjZTpcclxuICAgICAgICByZXR1cm4gJ2ludGVyZmFjZSc7XHJcbiAgICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLk1vZHVsZTpcclxuICAgICAgICByZXR1cm4gJ21vZHVsZSc7XHJcbiAgICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLlVuaXQ6XHJcbiAgICAgICAgcmV0dXJuICdidWlsdGluJztcclxuICAgICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuRW51bTpcclxuICAgICAgICByZXR1cm4gJ2VudW0nO1xyXG4gICAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5LZXl3b3JkOlxyXG4gICAgICAgIHJldHVybiAna2V5d29yZCc7XHJcbiAgICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLlNuaXBwZXQ6XHJcbiAgICAgICAgcmV0dXJuICdzbmlwcGV0JztcclxuICAgICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuRmlsZTpcclxuICAgICAgICByZXR1cm4gJ2ltcG9ydCc7XHJcbiAgICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLlJlZmVyZW5jZTpcclxuICAgICAgICByZXR1cm4gJ3JlcXVpcmUnO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHJldHVybiAndmFsdWUnO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=