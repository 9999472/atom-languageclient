Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _languageclientV = require('../protocol/languageclient-v2');

var _convert = require('../convert');

var _convert2 = _interopRequireDefault(_convert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

let AutocompleteBridge = class AutocompleteBridge {

  constructor(languageClient) {
    this._lc = languageClient;
  }

  dispose() {}

  provideSuggestions(request) {
    var _this = this;

    return _asyncToGenerator(function* () {
      const completionItems = yield _this._lc.completion({
        textDocument: _convert2.default.editorToTextDocumentIdentifier(request.editor),
        position: _convert2.default.pointToPosition(request.bufferPosition)
      });
      return AutocompleteBridge.completionItemsToSuggestions(completionItems, request);
    })();
  }

  static completionItemsToSuggestions(completionItems, request) {
    return (Array.isArray(completionItems) ? completionItems : completionItems.items || []).map(s => AutocompleteBridge.completionItemToSuggestion(s, request));
  }

  static completionItemToSuggestion(item, request) {
    let suggestion = {
      text: item.insertText || item.label,
      displayText: item.label,
      filterText: item.filterText || item.label,
      type: AutocompleteBridge.completionKindToSuggestionType(item.kind),
      description: item.detail,
      descriptionMoreURL: item.documentation
    };

    if (item.textEdit) {
      const { range, newText } = item.textEdit;
      suggestion.replacementPrefix = request.editor.getTextInBufferRange(_convert2.default.lsRangeToAtomRange(range));
      suggestion.text = newText;
    }

    // TODO: Snippets
    return suggestion;
  }

  static completionKindToSuggestionType(kind) {
    switch (kind) {
      case _languageclientV.CompletionItemKind.Method:
        return 'method';
      case _languageclientV.CompletionItemKind.Function:
      case _languageclientV.CompletionItemKind.Constructor:
        return 'function';
      case _languageclientV.CompletionItemKind.Field:
      case _languageclientV.CompletionItemKind.Property:
        return 'property';
      case _languageclientV.CompletionItemKind.Variable:
        return 'variable';
      case _languageclientV.CompletionItemKind.Class:
        return 'class';
      case _languageclientV.CompletionItemKind.Interface:
        return 'interface';
      case _languageclientV.CompletionItemKind.Module:
        return 'module';
      case _languageclientV.CompletionItemKind.Unit:
        return 'builtin';
      case _languageclientV.CompletionItemKind.Enum:
        return 'enum';
      case _languageclientV.CompletionItemKind.Keyword:
        return 'keyword';
      case _languageclientV.CompletionItemKind.Snippet:
        return 'snippet';
      case _languageclientV.CompletionItemKind.File:
        return 'import';
      case _languageclientV.CompletionItemKind.Reference:
        return 'require';
      default:
        return 'value';
    }
  }
};
exports.default = AutocompleteBridge;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9icmlkZ2VzL2F1dG9jb21wbGV0ZS1icmlkZ2UuanMiXSwibmFtZXMiOlsiQXV0b2NvbXBsZXRlQnJpZGdlIiwiY29uc3RydWN0b3IiLCJsYW5ndWFnZUNsaWVudCIsIl9sYyIsImRpc3Bvc2UiLCJwcm92aWRlU3VnZ2VzdGlvbnMiLCJyZXF1ZXN0IiwiY29tcGxldGlvbkl0ZW1zIiwiY29tcGxldGlvbiIsInRleHREb2N1bWVudCIsImVkaXRvclRvVGV4dERvY3VtZW50SWRlbnRpZmllciIsImVkaXRvciIsInBvc2l0aW9uIiwicG9pbnRUb1Bvc2l0aW9uIiwiYnVmZmVyUG9zaXRpb24iLCJjb21wbGV0aW9uSXRlbXNUb1N1Z2dlc3Rpb25zIiwiQXJyYXkiLCJpc0FycmF5IiwiaXRlbXMiLCJtYXAiLCJzIiwiY29tcGxldGlvbkl0ZW1Ub1N1Z2dlc3Rpb24iLCJpdGVtIiwic3VnZ2VzdGlvbiIsInRleHQiLCJpbnNlcnRUZXh0IiwibGFiZWwiLCJkaXNwbGF5VGV4dCIsImZpbHRlclRleHQiLCJ0eXBlIiwiY29tcGxldGlvbktpbmRUb1N1Z2dlc3Rpb25UeXBlIiwia2luZCIsImRlc2NyaXB0aW9uIiwiZGV0YWlsIiwiZGVzY3JpcHRpb25Nb3JlVVJMIiwiZG9jdW1lbnRhdGlvbiIsInRleHRFZGl0IiwicmFuZ2UiLCJuZXdUZXh0IiwicmVwbGFjZW1lbnRQcmVmaXgiLCJnZXRUZXh0SW5CdWZmZXJSYW5nZSIsImxzUmFuZ2VUb0F0b21SYW5nZSIsIk1ldGhvZCIsIkZ1bmN0aW9uIiwiQ29uc3RydWN0b3IiLCJGaWVsZCIsIlByb3BlcnR5IiwiVmFyaWFibGUiLCJDbGFzcyIsIkludGVyZmFjZSIsIk1vZHVsZSIsIlVuaXQiLCJFbnVtIiwiS2V5d29yZCIsIlNuaXBwZXQiLCJGaWxlIiwiUmVmZXJlbmNlIl0sIm1hcHBpbmdzIjoiOzs7OztBQUVBOztBQUVBOzs7Ozs7OztJQUVxQkEsa0IsR0FBTixNQUFNQSxrQkFBTixDQUF5Qjs7QUFH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cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcclxuXHJcbmltcG9ydCB7TGFuZ3VhZ2VDbGllbnRWMiwgQ29tcGxldGlvbkl0ZW1LaW5kfSBmcm9tICcuLi9wcm90b2NvbC9sYW5ndWFnZWNsaWVudC12Mic7XHJcbmltcG9ydCB0eXBlIHtDb21wbGV0aW9uSXRlbSwgQ29tcGxldGlvbkxpc3R9IGZyb20gJy4uL3Byb3RvY29sL2xhbmd1YWdlY2xpZW50LXYyJztcclxuaW1wb3J0IENvbnZlcnQgZnJvbSAnLi4vY29udmVydCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdXRvY29tcGxldGVCcmlkZ2Uge1xyXG4gIF9sYzogTGFuZ3VhZ2VDbGllbnRWMjtcclxuXHJcbiAgY29uc3RydWN0b3IobGFuZ3VhZ2VDbGllbnQ6IExhbmd1YWdlQ2xpZW50VjIpIHtcclxuICAgIHRoaXMuX2xjID0gbGFuZ3VhZ2VDbGllbnQ7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCk6IHZvaWQge1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgcHJvdmlkZVN1Z2dlc3Rpb25zKHJlcXVlc3Q6IGF0b20kQXV0b2NvbXBsZXRlUmVxdWVzdCk6IFByb21pc2U8QXJyYXk8YXRvbSRBdXRvY29tcGxldGVTdWdnZXN0aW9uPj4ge1xyXG4gICAgY29uc3QgY29tcGxldGlvbkl0ZW1zID0gYXdhaXQgdGhpcy5fbGMuY29tcGxldGlvbih7XHJcbiAgICAgIHRleHREb2N1bWVudDogQ29udmVydC5lZGl0b3JUb1RleHREb2N1bWVudElkZW50aWZpZXIocmVxdWVzdC5lZGl0b3IpLFxyXG4gICAgICBwb3NpdGlvbjogQ29udmVydC5wb2ludFRvUG9zaXRpb24ocmVxdWVzdC5idWZmZXJQb3NpdGlvbilcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIEF1dG9jb21wbGV0ZUJyaWRnZS5jb21wbGV0aW9uSXRlbXNUb1N1Z2dlc3Rpb25zKGNvbXBsZXRpb25JdGVtcywgcmVxdWVzdCk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY29tcGxldGlvbkl0ZW1zVG9TdWdnZXN0aW9ucyhjb21wbGV0aW9uSXRlbXM6IEFycmF5PENvbXBsZXRpb25JdGVtPiB8IENvbXBsZXRpb25MaXN0LCByZXF1ZXN0OiBhdG9tJEF1dG9jb21wbGV0ZVJlcXVlc3QpOiBBcnJheTxhdG9tJEF1dG9jb21wbGV0ZVN1Z2dlc3Rpb24+IHtcclxuICAgIHJldHVybiAoQXJyYXkuaXNBcnJheShjb21wbGV0aW9uSXRlbXMpID8gY29tcGxldGlvbkl0ZW1zIDogY29tcGxldGlvbkl0ZW1zLml0ZW1zIHx8IFtdKVxyXG4gICAgICAubWFwKHMgPT4gQXV0b2NvbXBsZXRlQnJpZGdlLmNvbXBsZXRpb25JdGVtVG9TdWdnZXN0aW9uKHMsIHJlcXVlc3QpKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjb21wbGV0aW9uSXRlbVRvU3VnZ2VzdGlvbihpdGVtOiBDb21wbGV0aW9uSXRlbSwgcmVxdWVzdDogYXRvbSRBdXRvY29tcGxldGVSZXF1ZXN0KTogYXRvbSRBdXRvY29tcGxldGVTdWdnZXN0aW9uIHtcclxuICAgIGxldCBzdWdnZXN0aW9uOiBhdG9tJEF1dG9jb21wbGV0ZVN1Z2dlc3Rpb24gPSB7XHJcbiAgICAgIHRleHQ6IGl0ZW0uaW5zZXJ0VGV4dCB8fCBpdGVtLmxhYmVsLFxyXG4gICAgICBkaXNwbGF5VGV4dDogaXRlbS5sYWJlbCxcclxuICAgICAgZmlsdGVyVGV4dDogaXRlbS5maWx0ZXJUZXh0IHx8IGl0ZW0ubGFiZWwsXHJcbiAgICAgIHR5cGU6IEF1dG9jb21wbGV0ZUJyaWRnZS5jb21wbGV0aW9uS2luZFRvU3VnZ2VzdGlvblR5cGUoaXRlbS5raW5kKSxcclxuICAgICAgZGVzY3JpcHRpb246IGl0ZW0uZGV0YWlsLFxyXG4gICAgICBkZXNjcmlwdGlvbk1vcmVVUkw6IGl0ZW0uZG9jdW1lbnRhdGlvbixcclxuICAgIH07XHJcblxyXG4gICAgaWYgKGl0ZW0udGV4dEVkaXQpIHtcclxuICAgICAgY29uc3Qge3JhbmdlLCBuZXdUZXh0fSA9IGl0ZW0udGV4dEVkaXQ7XHJcbiAgICAgIHN1Z2dlc3Rpb24ucmVwbGFjZW1lbnRQcmVmaXggPSByZXF1ZXN0LmVkaXRvci5nZXRUZXh0SW5CdWZmZXJSYW5nZShDb252ZXJ0LmxzUmFuZ2VUb0F0b21SYW5nZShyYW5nZSkpO1xyXG4gICAgICBzdWdnZXN0aW9uLnRleHQgPSBuZXdUZXh0O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRPRE86IFNuaXBwZXRzXHJcbiAgICByZXR1cm4gc3VnZ2VzdGlvbjtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjb21wbGV0aW9uS2luZFRvU3VnZ2VzdGlvblR5cGUoa2luZDogP251bWJlcik6IHN0cmluZyB7XHJcbiAgICBzd2l0Y2goa2luZCkge1xyXG4gICAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5NZXRob2Q6XHJcbiAgICAgICAgcmV0dXJuICdtZXRob2QnO1xyXG4gICAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5GdW5jdGlvbjpcclxuICAgICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuQ29uc3RydWN0b3I6XHJcbiAgICAgICAgcmV0dXJuICdmdW5jdGlvbic7XHJcbiAgICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLkZpZWxkOlxyXG4gICAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5Qcm9wZXJ0eTpcclxuICAgICAgICByZXR1cm4gJ3Byb3BlcnR5JztcclxuICAgICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuVmFyaWFibGU6XHJcbiAgICAgICAgcmV0dXJuICd2YXJpYWJsZSc7XHJcbiAgICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLkNsYXNzOlxyXG4gICAgICAgIHJldHVybiAnY2xhc3MnO1xyXG4gICAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5JbnRlcmZhY2U6XHJcbiAgICAgICAgcmV0dXJuICdpbnRlcmZhY2UnO1xyXG4gICAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5Nb2R1bGU6XHJcbiAgICAgICAgcmV0dXJuICdtb2R1bGUnO1xyXG4gICAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5Vbml0OlxyXG4gICAgICAgIHJldHVybiAnYnVpbHRpbic7XHJcbiAgICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLkVudW06XHJcbiAgICAgICAgcmV0dXJuICdlbnVtJztcclxuICAgICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuS2V5d29yZDpcclxuICAgICAgICByZXR1cm4gJ2tleXdvcmQnO1xyXG4gICAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5TbmlwcGV0OlxyXG4gICAgICAgIHJldHVybiAnc25pcHBldCc7XHJcbiAgICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLkZpbGU6XHJcbiAgICAgICAgcmV0dXJuICdpbXBvcnQnO1xyXG4gICAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5SZWZlcmVuY2U6XHJcbiAgICAgICAgcmV0dXJuICdyZXF1aXJlJztcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm4gJ3ZhbHVlJztcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19