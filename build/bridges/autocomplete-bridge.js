Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _languageclientV = require('../protocol/languageclient-v2');

var _convert = require('../convert');

var _convert2 = _interopRequireDefault(_convert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

let AutocompleteBridge = class AutocompleteBridge {

  constructor(languageClient) {
    this._lc = languageClient;
  }

  provideSuggestions(request) {
    var _this = this;

    return _asyncToGenerator(function* () {
      const completionItems = yield _this._lc.completion({
        textDocument: _convert2.default.editorToTextDocumentIdentifier(request.editor),
        position: _convert2.default.pointToPosition(request.bufferPosition)
      });
      return AutocompleteBridge.completionItemsToSuggestions(completionItems, request);
    })();
  }

  static completionItemsToSuggestions(completionItems, request) {
    return (Array.isArray(completionItems) ? completionItems : completionItems.items || []).map(s => AutocompleteBridge.completionItemToSuggestion(s, request));
  }

  static completionItemToSuggestion(item, request) {
    let suggestion = {
      text: item.insertText || item.label,
      displayText: item.label,
      filterText: item.filterText || item.label,
      type: AutocompleteBridge.completionKindToSuggestionType(item.kind),
      description: item.detail,
      descriptionMoreURL: item.documentation
    };

    if (item.textEdit) {
      const { range, newText } = item.textEdit;
      suggestion.replacementPrefix = request.editor.getTextInBufferRange(_convert2.default.lsRangeToAtomRange(range));
      suggestion.text = newText;
    }

    // TODO: Snippets
    return suggestion;
  }

  static completionKindToSuggestionType(kind) {
    switch (kind) {
      case _languageclientV.CompletionItemKind.Method:
        return 'method';
      case _languageclientV.CompletionItemKind.Function:
      case _languageclientV.CompletionItemKind.Constructor:
        return 'function';
      case _languageclientV.CompletionItemKind.Field:
      case _languageclientV.CompletionItemKind.Property:
        return 'property';
      case _languageclientV.CompletionItemKind.Variable:
        return 'variable';
      case _languageclientV.CompletionItemKind.Class:
        return 'class';
      case _languageclientV.CompletionItemKind.Interface:
        return 'interface';
      case _languageclientV.CompletionItemKind.Module:
        return 'module';
      case _languageclientV.CompletionItemKind.Unit:
        return 'builtin';
      case _languageclientV.CompletionItemKind.Enum:
        return 'enum';
      case _languageclientV.CompletionItemKind.Keyword:
        return 'keyword';
      case _languageclientV.CompletionItemKind.Snippet:
        return 'snippet';
      case _languageclientV.CompletionItemKind.File:
        return 'import';
      case _languageclientV.CompletionItemKind.Reference:
        return 'require';
      default:
        return 'value';
    }
  }
};
exports.default = AutocompleteBridge;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9icmlkZ2VzL2F1dG9jb21wbGV0ZS1icmlkZ2UuanMiXSwibmFtZXMiOlsiQXV0b2NvbXBsZXRlQnJpZGdlIiwiY29uc3RydWN0b3IiLCJsYW5ndWFnZUNsaWVudCIsIl9sYyIsInByb3ZpZGVTdWdnZXN0aW9ucyIsInJlcXVlc3QiLCJjb21wbGV0aW9uSXRlbXMiLCJjb21wbGV0aW9uIiwidGV4dERvY3VtZW50IiwiZWRpdG9yVG9UZXh0RG9jdW1lbnRJZGVudGlmaWVyIiwiZWRpdG9yIiwicG9zaXRpb24iLCJwb2ludFRvUG9zaXRpb24iLCJidWZmZXJQb3NpdGlvbiIsImNvbXBsZXRpb25JdGVtc1RvU3VnZ2VzdGlvbnMiLCJBcnJheSIsImlzQXJyYXkiLCJpdGVtcyIsIm1hcCIsInMiLCJjb21wbGV0aW9uSXRlbVRvU3VnZ2VzdGlvbiIsIml0ZW0iLCJzdWdnZXN0aW9uIiwidGV4dCIsImluc2VydFRleHQiLCJsYWJlbCIsImRpc3BsYXlUZXh0IiwiZmlsdGVyVGV4dCIsInR5cGUiLCJjb21wbGV0aW9uS2luZFRvU3VnZ2VzdGlvblR5cGUiLCJraW5kIiwiZGVzY3JpcHRpb24iLCJkZXRhaWwiLCJkZXNjcmlwdGlvbk1vcmVVUkwiLCJkb2N1bWVudGF0aW9uIiwidGV4dEVkaXQiLCJyYW5nZSIsIm5ld1RleHQiLCJyZXBsYWNlbWVudFByZWZpeCIsImdldFRleHRJbkJ1ZmZlclJhbmdlIiwibHNSYW5nZVRvQXRvbVJhbmdlIiwiTWV0aG9kIiwiRnVuY3Rpb24iLCJDb25zdHJ1Y3RvciIsIkZpZWxkIiwiUHJvcGVydHkiLCJWYXJpYWJsZSIsIkNsYXNzIiwiSW50ZXJmYWNlIiwiTW9kdWxlIiwiVW5pdCIsIkVudW0iLCJLZXl3b3JkIiwiU25pcHBldCIsIkZpbGUiLCJSZWZlcmVuY2UiXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUE7O0FBRUE7Ozs7Ozs7O0lBRXFCQSxrQixHQUFOLE1BQU1BLGtCQUFOLENBQXlCOztBQUd0Q0MsY0FBWUMs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clxuaW1wb3J0IHtMYW5ndWFnZUNsaWVudFYyLCBDb21wbGV0aW9uSXRlbUtpbmR9IGZyb20gJy4uL3Byb3RvY29sL2xhbmd1YWdlY2xpZW50LXYyJztcclxuaW1wb3J0IHR5cGUge0NvbXBsZXRpb25JdGVtLCBDb21wbGV0aW9uTGlzdH0gZnJvbSAnLi4vcHJvdG9jb2wvbGFuZ3VhZ2VjbGllbnQtdjInO1xyXG5pbXBvcnQgQ29udmVydCBmcm9tICcuLi9jb252ZXJ0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF1dG9jb21wbGV0ZUJyaWRnZSB7XHJcbiAgX2xjOiBMYW5ndWFnZUNsaWVudFYyO1xyXG5cclxuICBjb25zdHJ1Y3RvcihsYW5ndWFnZUNsaWVudDogTGFuZ3VhZ2VDbGllbnRWMikge1xyXG4gICAgdGhpcy5fbGMgPSBsYW5ndWFnZUNsaWVudDtcclxuICB9XHJcblxyXG4gIGFzeW5jIHByb3ZpZGVTdWdnZXN0aW9ucyhyZXF1ZXN0OiBhdG9tJEF1dG9jb21wbGV0ZVJlcXVlc3QpOiBQcm9taXNlPEFycmF5PGF0b20kQXV0b2NvbXBsZXRlU3VnZ2VzdGlvbj4+IHtcclxuICAgIGNvbnN0IGNvbXBsZXRpb25JdGVtcyA9IGF3YWl0IHRoaXMuX2xjLmNvbXBsZXRpb24oe1xyXG4gICAgICB0ZXh0RG9jdW1lbnQ6IENvbnZlcnQuZWRpdG9yVG9UZXh0RG9jdW1lbnRJZGVudGlmaWVyKHJlcXVlc3QuZWRpdG9yKSxcclxuICAgICAgcG9zaXRpb246IENvbnZlcnQucG9pbnRUb1Bvc2l0aW9uKHJlcXVlc3QuYnVmZmVyUG9zaXRpb24pXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBBdXRvY29tcGxldGVCcmlkZ2UuY29tcGxldGlvbkl0ZW1zVG9TdWdnZXN0aW9ucyhjb21wbGV0aW9uSXRlbXMsIHJlcXVlc3QpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNvbXBsZXRpb25JdGVtc1RvU3VnZ2VzdGlvbnMoY29tcGxldGlvbkl0ZW1zOiBBcnJheTxDb21wbGV0aW9uSXRlbT4gfCBDb21wbGV0aW9uTGlzdCwgcmVxdWVzdDogYXRvbSRBdXRvY29tcGxldGVSZXF1ZXN0KTogQXJyYXk8YXRvbSRBdXRvY29tcGxldGVTdWdnZXN0aW9uPiB7XHJcbiAgICByZXR1cm4gKEFycmF5LmlzQXJyYXkoY29tcGxldGlvbkl0ZW1zKSA/IGNvbXBsZXRpb25JdGVtcyA6IGNvbXBsZXRpb25JdGVtcy5pdGVtcyB8fCBbXSlcclxuICAgICAgLm1hcChzID0+IEF1dG9jb21wbGV0ZUJyaWRnZS5jb21wbGV0aW9uSXRlbVRvU3VnZ2VzdGlvbihzLCByZXF1ZXN0KSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY29tcGxldGlvbkl0ZW1Ub1N1Z2dlc3Rpb24oaXRlbTogQ29tcGxldGlvbkl0ZW0sIHJlcXVlc3Q6IGF0b20kQXV0b2NvbXBsZXRlUmVxdWVzdCk6IGF0b20kQXV0b2NvbXBsZXRlU3VnZ2VzdGlvbiB7XHJcbiAgICBsZXQgc3VnZ2VzdGlvbjogYXRvbSRBdXRvY29tcGxldGVTdWdnZXN0aW9uID0ge1xyXG4gICAgICB0ZXh0OiBpdGVtLmluc2VydFRleHQgfHwgaXRlbS5sYWJlbCxcclxuICAgICAgZGlzcGxheVRleHQ6IGl0ZW0ubGFiZWwsXHJcbiAgICAgIGZpbHRlclRleHQ6IGl0ZW0uZmlsdGVyVGV4dCB8fCBpdGVtLmxhYmVsLFxyXG4gICAgICB0eXBlOiBBdXRvY29tcGxldGVCcmlkZ2UuY29tcGxldGlvbktpbmRUb1N1Z2dlc3Rpb25UeXBlKGl0ZW0ua2luZCksXHJcbiAgICAgIGRlc2NyaXB0aW9uOiBpdGVtLmRldGFpbCxcclxuICAgICAgZGVzY3JpcHRpb25Nb3JlVVJMOiBpdGVtLmRvY3VtZW50YXRpb24sXHJcbiAgICB9O1xyXG5cclxuICAgIGlmIChpdGVtLnRleHRFZGl0KSB7XHJcbiAgICAgIGNvbnN0IHtyYW5nZSwgbmV3VGV4dH0gPSBpdGVtLnRleHRFZGl0O1xyXG4gICAgICBzdWdnZXN0aW9uLnJlcGxhY2VtZW50UHJlZml4ID0gcmVxdWVzdC5lZGl0b3IuZ2V0VGV4dEluQnVmZmVyUmFuZ2UoQ29udmVydC5sc1JhbmdlVG9BdG9tUmFuZ2UocmFuZ2UpKTtcclxuICAgICAgc3VnZ2VzdGlvbi50ZXh0ID0gbmV3VGV4dDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUT0RPOiBTbmlwcGV0c1xyXG4gICAgcmV0dXJuIHN1Z2dlc3Rpb247XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY29tcGxldGlvbktpbmRUb1N1Z2dlc3Rpb25UeXBlKGtpbmQ6ID9udW1iZXIpOiBzdHJpbmcge1xyXG4gICAgc3dpdGNoKGtpbmQpIHtcclxuICAgICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuTWV0aG9kOlxyXG4gICAgICAgIHJldHVybiAnbWV0aG9kJztcclxuICAgICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuRnVuY3Rpb246XHJcbiAgICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLkNvbnN0cnVjdG9yOlxyXG4gICAgICAgIHJldHVybiAnZnVuY3Rpb24nO1xyXG4gICAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5GaWVsZDpcclxuICAgICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuUHJvcGVydHk6XHJcbiAgICAgICAgcmV0dXJuICdwcm9wZXJ0eSc7XHJcbiAgICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLlZhcmlhYmxlOlxyXG4gICAgICAgIHJldHVybiAndmFyaWFibGUnO1xyXG4gICAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5DbGFzczpcclxuICAgICAgICByZXR1cm4gJ2NsYXNzJztcclxuICAgICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuSW50ZXJmYWNlOlxyXG4gICAgICAgIHJldHVybiAnaW50ZXJmYWNlJztcclxuICAgICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuTW9kdWxlOlxyXG4gICAgICAgIHJldHVybiAnbW9kdWxlJztcclxuICAgICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuVW5pdDpcclxuICAgICAgICByZXR1cm4gJ2J1aWx0aW4nO1xyXG4gICAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5FbnVtOlxyXG4gICAgICAgIHJldHVybiAnZW51bSc7XHJcbiAgICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLktleXdvcmQ6XHJcbiAgICAgICAgcmV0dXJuICdrZXl3b3JkJztcclxuICAgICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuU25pcHBldDpcclxuICAgICAgICByZXR1cm4gJ3NuaXBwZXQnO1xyXG4gICAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5GaWxlOlxyXG4gICAgICAgIHJldHVybiAnaW1wb3J0JztcclxuICAgICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuUmVmZXJlbmNlOlxyXG4gICAgICAgIHJldHVybiAncmVxdWlyZSc7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgcmV0dXJuICd2YWx1ZSc7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==